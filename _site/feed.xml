<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rookie Dev</title>
    <description></description>
    <link>http://127.0.0.1:4000//</link>
    <atom:link href="http://127.0.0.1:4000//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 15 Jul 2015 19:50:33 -0700</pubDate>
    <lastBuildDate>Wed, 15 Jul 2015 19:50:33 -0700</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>Breaking Into Web Development In Small Steps</title>
        <description>&lt;p&gt;It used to be that the words “computer programmer” conjured up memories for me of people in the math and science building of my university. They were the people who arrived 30 minutes before class to consult with each other on complex problems. All the while, I sat there just waiting to get my required astronomy course over with and browsing Pinterest while I waited for it to start. They were geniuses in my book.&lt;/p&gt;

&lt;p&gt;The thing is, yes, they were smart. They were computer science majors who were taking advanced calculus. They spent all their time reading computer science textbooks and solving algorithms. Yet, to be a computer programmer you don’t have to know advanced calculus, at least not to get started. You don’t even need a computer science degree (although more power to you if you have one!). If you really want to get into the field, it just requires some dedication and a willingness to learn as well as ask questions. &lt;strong&gt;I recommend reading this blog post to learn how I got the courage to get into web development and to see what skills to learn first. After that, you will hopefully be able to see that breaking into web development isn’t &lt;em&gt;that&lt;/em&gt; scary.&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;moving-beyond-wordpress&quot;&gt;Moving beyond Wordpress&lt;/h1&gt;

&lt;p&gt;I don’t know why your are interested in web development. Maybe it is because you want to do something creative and you have a strong interest in tech already. Maybe, you have been in love with web development since you were a teenager (and in this case you probably know more about the subject than I do). Or, you are like me and arrived at the idea of pursuing web development a little later in life. &lt;strong&gt;I do know that getting into web development is intimidating. It shouldn’t be though!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For me, the moment I knew I wanted to be a front-end developer came one-month into unemployment. I had lost interest in much of my former career once I was no longer being paid to do it. Instead, I spent my days messing around with a Wordpress blog that I used to have. That is until the theme I was using had an update that turned my content into an enlarged, pixelated mess. (Has anyone ever had this happen to them before??)&lt;/p&gt;

&lt;p&gt;I spent two weeks re-doing the site. Yet, working on the redesign was the most fun I had since being employed. I didn’t even mind that I was sitting at a kitchen table rather than a desk. I didn’t care that I wasn’t being paid to do the work. The work was just fun.&lt;/p&gt;

&lt;p&gt;Once the site was back to how I liked it, I was even a bit proud of my work. In fact, the site looked even better than before because I had found a way to inspect elements and figure out their selectors to make some custom changes of my own.&lt;/p&gt;

&lt;p&gt;I showed off my work to my S.O. at dinner once it was complete. I pulled the site up on my phone and asked him if he would take a look. He is a self-taught back-end developer who never ceases to impress me with all the cool things that he is able to do. Showing him my work was kind of intimidating to be honest because he really knows how sites should work and function. Yet, he was smiling when he saw what I had done. He then looked up at me and very carefully suggested that I go into front-end development.&lt;/p&gt;

&lt;p&gt;The thing is, I had been thinking about the same thing for months - ever since I learned how to fix site bugs at work. That was when I first began to study HTML and Markdown. Still, I wasn’t sure if I could be a front-end developer.&lt;/p&gt;

&lt;p&gt;I didn’t think that I was smart enough to do that. You see, I studied creative writing in college. From there, I thought that I was going to spend my adult life as a secretary or admin assistant while writing a novel during coffee fueled nights. Going into web development was something I had never thought that I could do. &lt;em&gt;It simply didn’t fit in with the idea I had been forming for myself.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;where-to-start&quot;&gt;Where to start&lt;/h1&gt;

&lt;p&gt;That night though I said good-bye to that idea because it just wasn’t working for me. Instead, My S.O. and I sat down together and went over some basic concepts. I learned about arrays, operators, and zero-based indexes in JavaScript. Then, we googled &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; together and my S.O. ran some commands to create a Jekyll powered static blog site that I could work on. &lt;strong&gt;It took us about three hours for me to see that I had it in me to learn a programming language &lt;em&gt;and&lt;/em&gt; that I had a means to create a site from scratch.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;My task for the next day was to learn how to add new pages to the site and begin creating a design I liked. I had to learn how to select elements for manipulation in JavaScript, how to maintain clean, modular code, and how to out specify the base stylesheet included in the Jekyll directory. This was all kind of overwhelming.&lt;/p&gt;

&lt;p&gt;What helped was focusing on one task at a time. For example, if I could just learn what the DOM was first before learning how to traverse it, I was okay. This approach helped A LOT!  I started off by learning three basic skills. HTML, CSS, and JavaScript.&lt;/p&gt;

&lt;p&gt;It may help you to take this same approach. &lt;strong&gt;Here are some steps to help you get started!&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;make-a-github-account&quot;&gt;Make a GitHub account&lt;/h2&gt;

&lt;p&gt;If you want to begin a project of your own,  I first suggest you make a GitHub account. Someone once told me “GitHub or get out.” They meant, you need to have a GitHub account before an interviewer will take you seriously. It’s smart advice. Having a GitHub account helps employers know that you have worked on project before, that you know a little something about &lt;a href=&quot;https://git-scm.com/book/en/v2/Getting-Started-About-Version-Control&quot;&gt;version control&lt;/a&gt;, and that you’re interested in what others in the development community are up to.&lt;/p&gt;

&lt;p&gt;Just go to &lt;a href=&quot;https://github.com/&quot;&gt;github.com&lt;/a&gt; and create an account. You can then create a new repository for the project you want to work on and go from there!&lt;/p&gt;

&lt;h2 id=&quot;html&quot;&gt;HTML&lt;/h2&gt;

&lt;p&gt;HTML, or Hypertext Markup Language, is just a way to create a skeleton for how your site will look. For example, it will help you declare where headers will go and where certain blocks of content will be placed on your page. Here are some great steps to help you master it:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Read up on how to write HTML:&lt;/strong&gt; &lt;a href=&quot;http://www.w3schools.com/html/default.asp&quot;&gt;W3Schools&lt;/a&gt; is a great first place to look!&lt;/li&gt;
  &lt;li&gt;Learn the difference between a div and a span: You can think of a div as a dividing element in your markup. It contains and divides certain sections of your layout. A span, on the other hand, is a way to apply stylings to a certain section &lt;em&gt;span&lt;/em&gt;-ing a certain length of your markup.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Mess around with HTML to create your own custom layouts:&lt;/strong&gt; You can try by working on your own project or creating something in a &lt;a href=&quot;http://codepen.io/pen/&quot;&gt;codepen&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Harness the power of the list! Seriously, you can do a lot with lists when they are combined with CSS.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Learn how to indent properly:&lt;/strong&gt; Elements within element should be indented.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Just know that when someone says “show me your markup,”  - this just means show them your HTML file:&lt;/strong&gt; I’ll admit, I didn’t know this for a &lt;em&gt;long&lt;/em&gt; time!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;scss&quot;&gt;SCSS&lt;/h2&gt;

&lt;p&gt;I recommend learning &lt;a href=&quot;http://rookie-dev.herokuapp.com/2015/07/20/sass.html&quot;&gt;SCSS&lt;/a&gt; first. It will make it easier when you are ready to switch to &lt;a href=&quot;http://sass-lang.com/&quot;&gt;SASS&lt;/a&gt; (a very marketable skill).&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Pull up a local version of your project and make changes in the browser:&lt;/strong&gt; This will help you identify your class and ID names. It will also help you better visualize what needs to be tweaked. This way, you can experiment with what some properties do. Seriously, sometimes I just experiment with properties until my layout does what I want it to do. Keep in mind that I always use W3 Schools to check that the solution I arrive is a sustainable/pragmatic choice before actually implementing it.&lt;/li&gt;
  &lt;li&gt;Look at other websites that you admire and dissect their source code. While you are at, find what you like about their site and try to implement those features yourself.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;javascript&quot;&gt;JavaScript&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Check out some great resources &lt;a href=&quot;http://rookie-dev.herokuapp.com/2015/08/05/resources.html&quot;&gt;here&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Begin by learning about operators&lt;/strong&gt;: Operators are just ways to perform math or declare conditional statements.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Dive into the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript&quot;&gt;Mozilla Developer Network&lt;/a&gt;:&lt;/strong&gt; Here, you can find out how to traverse your DOM and discover cool new methods!&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Look into jQuery&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Add some events using jQuery to your website.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Solve some algorithms - &lt;a href=&quot;http://adriann.github.io/programming_problems.html&quot;&gt;(easy ones)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;THEN learn more advanced concepts&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;find a project that you want to implement using JavaScript&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;git-commands&quot;&gt;Git Commands&lt;/h2&gt;

&lt;p&gt;Yes, you need to know about version control. This is your first project, meaning you are most likely the only contributor. Yet, if you picture yourself working in web development, you will be working on a team and they will be using some kind of version control. Version control is a way to prevent people from erasing new implementations accidentally or stepping on each other’s toes during development. For Jekyll specific projects, you will really only need to know a few commands to test your site and make sure all of it’s features work properly. If you want to know some more though, I often reference this list &lt;a href=&quot;https://gist.github.com/hofmannsven/6814451&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;cd (change directory):&lt;/strong&gt; You need to let your command line know what files you will be working with. To do this, you cd into the correct directory. The directory will be the name of folder all of your project files are in.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;jekyll serve:&lt;/strong&gt; start up your local server.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;git check out &lt;em&gt;branch name&lt;/em&gt;:&lt;/strong&gt;  Switch to the branch you want to be working in.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;git branch:&lt;/strong&gt; Find out what branch you are currently in.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;git status:&lt;/strong&gt; See if your branch is up to date or not&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;git diff:&lt;/strong&gt; See what changes you have made to so far.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;git add:&lt;/strong&gt; Add your changes to a new commit.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;git commit -m “&lt;em&gt;insert message here indicating what you are committing”&lt;/em&gt;:&lt;/strong&gt; Commit your changes to your current branch.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;git push origin &lt;em&gt;branch name&lt;/em&gt;:&lt;/strong&gt; Push your changes to a live environment.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Okay, now you have some great steps to focus on. If you are like me, these steps will be able to help A LOT. A common problem I had while learning was not knowing what to do next. I wanted to make this post to help others avoid this problem. Once you have all of these steps mastered, we can talk about overcoming imposter syndrome! &lt;strong&gt;Thanks for reading guys!&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 12 Sep 2015 10:00:00 -0700</pubDate>
        <link>http://127.0.0.1:4000//2015/09/12/first-project.html</link>
        <guid isPermaLink="true">http://127.0.0.1:4000//2015/09/12/first-project.html</guid>
        
        
      </item>
    
      <item>
        <title>Learning About Media Queries</title>
        <description>&lt;p&gt;Say you are working on a website and want it to look great across multiple devices. Meaning, you need your layout to look just as great on phones or tablets as it does on desktop. I mean you worked so hard to make it look wonderful on your desktop computer that you want everyone who sees it to appreciate your work no matter what device they are viewing it on, right?&lt;/p&gt;

&lt;p&gt;Well, there are ways to do this. For example, you could use &lt;a href=&quot;&amp;quot;https://developer.mozilla.org/en-US/docs/Web/CSS/flex&amp;quot;&quot;&gt;flex properties&lt;/a&gt;. However, these will only really provide a solution in modern browsers. Alternatively, a technique that many use are media queries.&lt;/p&gt;

&lt;p&gt;First, let’s start thinking about your site’s layout. When thinking about a layout, you can start by thinking about the way it will look on a desktop.&lt;/p&gt;

&lt;h3 id=&quot;desktop-layout&quot;&gt;Desktop layout&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/rookiedevmockup.jpg&quot; alt=&quot;Mobile UI Mock Up&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After your desktop layout is perfect, you will want to think about how that same site will look on a smaller screen. Ideally, you will think about the problem of a smaller screen before development. For example, you can think about how your layout will look on a mobile device. In the case of Rookie Dev here, I changed my home page from a three-column layout to a single layout and created a dropdown menu that I’ve indicated with a navicon. &lt;strong&gt;In development, you can make these layout changes with the help media queries.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;mobile-layout&quot;&gt;Mobile layout&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/rookiedevmobile.jpg&quot; alt=&quot;Mobile UI Mock Up&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;what-is-a-media-query&quot;&gt;What is a media query?&lt;/h1&gt;

&lt;p&gt;You can think of media queries as a tool that will let you change your layout when certain conditions apply (or at certain breakpoints). For example, what if you reduce your screen size to 760px and see that your two-column layout on your home page looks way to busy. Well, then you would want to include a rule in your stylesheet that says that when someone views your site at a screen width of 760px, your home page should change to a one-column layout. Now your home page looks much better. Awesome!&lt;/p&gt;

&lt;p&gt;To help you gain a grasp on what a media query looks like, you can checkout the example here.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;k&quot;&gt;@media&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;max-width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;457px&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nc&quot;&gt;.page-heading&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;30px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;nf&quot;&gt;#line-one&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3em&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;padding-top&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;40px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;nf&quot;&gt;#line-two&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4em&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is an example of a media query I used to help make the Rookie Dev logo and its surrounding div shrink once a user’s screen size reaches 457px or smaller. I reached the number 457 by basically shrinking my window until the logo and page-heading div looked ugly. That was my breakpoint and the width at which I needed to make a new rule within my stylesheet.&lt;/p&gt;

&lt;h1 id=&quot;when-to-use-a-media-query&quot;&gt;When to use a media query&lt;/h1&gt;
&lt;p&gt;I have found that while you are developing your site, you should consistently check how new features look at different screen sizes. If you find that a piece of your content looks ugly at a certain screen width, then you should either consider using a media query. &lt;strong&gt;Just remember to base your media query rules on how your content looks rather than on popular device widths.&lt;/strong&gt; If you base your rules on device widths, you will have to keep adding more and more rules as new products emerge. This can quickly lead to overly complex code and a lot of wasted time (which I know you don’t want).&lt;/p&gt;

&lt;p&gt;Yet, before you define a media query rule, it can also help to remember that many layout problems can be fixed by using more flexible measurement units. For example, using percentages &lt;a href=&quot;https://css-tricks.com/why-ems/&quot;&gt;or ems&lt;/a&gt; when it comes to defining font sizes. Yet, if your overall layout isn’t working at a certain screen width, well then you have encountered a breakpoint and should probably consider using a media query.&lt;/p&gt;

&lt;p&gt;A breakpoint is a point where your layout &lt;em&gt;breaks&lt;/em&gt;, indicating that your layout should change. You can see breakpoints in action by going to a site and seeing how the layouts alter at certain points. &lt;a href=&quot;https://css-tricks.com/&quot;&gt;CSS Tricks&lt;/a&gt; is a great example if you want to check it out. Simply make the screen at CSS Tricks smaller. You will notice that the sidebar on the right hand of the screen becomes thinner and thinner until it disappears completely at mobile-sized width. &lt;strong&gt;Each little micro-change in the CSS Tricks layout represents a breakpoint.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now, let’s look at the different kinds of media queries that you can use for your own project.&lt;/p&gt;

&lt;h2 id=&quot;max-width-and-min-width&quot;&gt;Max width and min width&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Here is a technical definition:&lt;/strong&gt; The width media feature describes the width of the rendering surface of the output device (such as the width of the document window, or the width of the page box on a printer).&lt;/p&gt;

&lt;p&gt;What this really means is that you can make a media query rule that determines what happens to your layout at a certain width. You can think of Min and Max as replacements for the ‘&amp;lt;’ and ‘&amp;gt;’ operators. You can see the Max width media query in action in my example above.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Min will change layouts when the change should occur at a length that is greater or equal to the pixel width you define.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Max width will apply at a width that is less than or equal to the width you define.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;portrait-and-landscape-properties&quot;&gt;Portrait and landscape properties&lt;/h2&gt;
&lt;p&gt;I am most excited about these properties! I just recently learned about portrait and landscape properties myself thanks to &lt;a href=&quot;http://teamtreehouse.com&quot;&gt;Treehouse&lt;/a&gt;. If you are making a mobile first design, then you probably want rules that will make your layout look great on smaller screen sizes. Well, if you have been considering breakpoints while implementing new features, then I am sure you will have this covered.&lt;/p&gt;

&lt;p&gt;Yet, what if your user wants to view your project in a landscape mode? For example, what will happen to your layout when a user rotates their phone or tablet? Well, you can make rules for these instances as well. You can see examples of the portrait and landscape properties in action over on &lt;a href=&quot;http://stephen.io/mediaqueries/&quot;&gt;Stephen Gilbert’s site here&lt;/a&gt;. In general, you can begin defining style rules following the syntax below:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;k&quot;&gt;@media&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;orientation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;portrait&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@media&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;orientation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;portrait&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;media-query-syntax&quot;&gt;Media query syntax&lt;/h2&gt;
&lt;p&gt;I bet you noticed that in the portrait and landscape example we used the word “and” as well as further specifiied our media query within a set of parentheses. One thing I have found is that if you are having trouble remembering how to write out a media query rule, you can draw on what you know about &lt;a href=&quot;http://www.w3schools.com/js/js_operators.asp&quot;&gt;operators&lt;/a&gt;. For example, if you want two rules that apply at once, you should use “and” in the same way you would use &amp;amp;&amp;amp; in JavaScript. You will even see that you can even write something with multiple specifications like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;k&quot;&gt;@media&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;handheld&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;max-width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;15em&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;where-to-learn-more&quot;&gt;Where to learn more&lt;/h2&gt;

&lt;p&gt;Okay, now I’ve shown you some key media query properties that you can use while working on your current or next project. I didn’t cover everything that can be done with media queries. There are still many other things you can do. For example, you could also consider color-index, aspect-ratio, and even other Mozilla specific media features. I’ll let you guys look into these yourself though &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries#Media_features&quot;&gt;over on MDN&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thanks for reading guys! Hope this post helps.&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 05 Sep 2015 10:00:00 -0700</pubDate>
        <link>http://127.0.0.1:4000//2015/09/05/mediaquery.html</link>
        <guid isPermaLink="true">http://127.0.0.1:4000//2015/09/05/mediaquery.html</guid>
        
        
      </item>
    
      <item>
        <title>Great Resources For Learning JavaScript</title>
        <description>&lt;p&gt;I know from experience that learning JavaScript can be &lt;em&gt;very&lt;/em&gt; challenging. If you are learning about JavaScript in school or are teaching yourself, I wanted to help you find some great resources that may help. It took me a couple of months to finally be comfortable in the language. I tried books, blogs, in-person instruction, forums, and videos. Some helped and others didn’t as to be expected. In the end, here is a compiled collection of some the better resources I was able to find.&lt;/p&gt;

&lt;h1 id=&quot;books&quot;&gt;Books:&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;ftp://91.193.236.10/pub/docs/linux-support/programming/JavaScript/%5BO%60Reilly%5D%20-%20JavaScript.%20The%20Definitive%20Guide,%206th%20ed.%20-%20%5BFlanagan%5D.pdf&quot;&gt;JavaScript the Definitive Guide&lt;/a&gt;:&lt;/strong&gt; Okay, it’s long. So just don’t read the whole thing, okay? I found it helpful to read the first 5-10 chapters. It helped me understand what was actually going on in JavaScript. What I found the most helpful is the time the author spent to explain each and every line of his examples. Meaning, you will never have to guess at what a piece of code is doing. Instead, everything is totally straight forward. While reading the Definitive Guide I was able to finally understand some important concepts in JavaScript. Other books would skim over these same concepts as if they were easy to comprehend. So, if you’re like me and having some problems understanding some of the basics, this might be the book for you.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://shop.oreilly.com/product/9780596517748.do&quot;&gt;JavaScript the Good Parts&lt;/a&gt;:&lt;/strong&gt; I would especially recommend this book if you are a visual learner. JavaScript the Good Parts is super easy to skim through and will give you useful info (though, you may have to look up some concepts on Google as it doesn’t go out of its way to help its readers understand everything). I heard that the The Good Parts is a retaliation against the Definitive Guide so it only makes sense that it is shorter and offers a little less explanation. Yet still, it is definitely more useful than other introductions to JavaScript out there.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://eloquentjavascript.net/&quot;&gt;Writing Eloquent JavaScript&lt;/a&gt;:&lt;/strong&gt; Read this only if you know the fundamentals of JavaScript already. The books comes highly recommended by programmers but I really don’t think it should be recommended for those just starting to learn about the language. For example, I initially had no idea what was going on when examples showed up filled with ‘for’ loops and counters or unexplained methods. &lt;strong&gt;However, DO read this if you want to learn how to write better JavaScript or if you want to solve some pretty cool problems that the author includes at the end of each chapter.&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;websites&quot;&gt;Websites:&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;http://www.w3schools.com/js/default.asp&quot;&gt;W3Schools&lt;/a&gt;:&lt;/strong&gt; This is a great go-to resource for anything that may come up. It will cover anything from syntax to basic explanations about what some methods do. It is a trusted resource for many and definitely a good site to check out.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;http://stackoverflow.com/&quot;&gt;Stack Overflow&lt;/a&gt;:&lt;/strong&gt; If you have a question, you can get an answer here. Many use Stack Overflow to debug their code if they are truly stumped. Yet, these days it is more common to just browse through others questions to see if a solution is already out there for you to check out.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;http://jshint.com/&quot;&gt;JsHint&lt;/a&gt;:&lt;/strong&gt; If you don’t know how to debug your own code yet, you can use JS Hint. It will tell what problems are present and where to find them. Yet, it may be better to just look up how to your console to debug yourself.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;http://codepen.io/pen/&quot;&gt;CodePen&lt;/a&gt;:&lt;/strong&gt; Want to just try something out to see how it works? CodePen (which was suggested to me via a reply to this post actually) will give you a workspace to mess around in. It will be your own no-stakes sandbox if you want ever want it.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;http://javascriptissexy.com/&quot;&gt;JavaScript Is Sexy&lt;/a&gt;:&lt;/strong&gt; Java Script is Sexy provides a series of posts for almost thing you could think of concerning Java Script &lt;em&gt;and&lt;/em&gt; and it links to several other awesome resources out there. For example, I used the site to find the subreddits listed below and JavaScript the Definitive Guide.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;some-design-inspirations&quot;&gt;Some design inspirations:&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;http://ajclarkson.co.uk/blog/&quot;&gt;AJ Clarkson’s Site and Portfolio&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;http://www.ashleyfarrand.com/about/&quot;&gt;Ashley Farrand’s Design Website&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;http://www.thisisfreshface.com/&quot;&gt;Fresh Face&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;You can also check out my pinterest board for more web design inspirations &lt;a href=&quot;https://www.pinterest.com/ktagilbert/web-design/&quot;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;miscellaneous&quot;&gt;Miscellaneous:&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Subreddits:
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://www.reddit.com/r/webdev/&quot;&gt;r/webdev&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://www.reddit.com/r/web_design/&quot;&gt;r/webdesign&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://www.reddit.com/r/learnjavascript/&quot;&gt;r/learningjavascript&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://teamtreehouse.com/home&quot;&gt;Treehouse&lt;/a&gt;:&lt;/strong&gt; a bunch of videos and challenges to help you learn new languages. Treehouse was my favorite resource. Everyone has their own learning style really but for me, watching videos helped the concepts click in my head. Treehouse mixes information with practical challenges that you type yourself. The mix of info and challenges helps gives concepts in JavaScript a practical implementation. Yes, you can choose to skip over the challenges but I really suggest you at least give them a try for your own sake. Also, note that Treehouse has a subscription fee. It is $25 a month for the basic subscription but there is a 14 day free trial period if you just want to check it out.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are just the best resources that I have been able to find so far. If you find any others that you think should be added to this list let me know and I’ll update this post. &lt;strong&gt;Thanks for reading guys!&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 05 Aug 2015 10:00:00 -0700</pubDate>
        <link>http://127.0.0.1:4000//2015/08/05/resources.html</link>
        <guid isPermaLink="true">http://127.0.0.1:4000//2015/08/05/resources.html</guid>
        
        
      </item>
    
      <item>
        <title>How to Start Learning SCSS</title>
        <description>&lt;h2 id=&quot;bridging-the-gap-between-css-and-sass&quot;&gt;Bridging the gap between CSS and SASS&lt;/h2&gt;

&lt;p&gt;I have a confession. When I first started working on Rookie Dev, I had no idea what SCSS was. The language just seemed like something that was going to be extremely difficult to learn. &lt;em&gt;With an already limited knowledge of CSS, I was intimidated.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It turns out that SCSS is not that difficult.&lt;/p&gt;

&lt;h1 id=&quot;what-helped-me-learn-about-scss&quot;&gt;What helped me learn about SCSS:&lt;/h1&gt;
&lt;p&gt;I simply pulled open my computer and read up on SASS. I started by typing in “learning SASS” into Google. I  was then directed to &lt;a href=&quot;http://sass-lang.com/&quot;&gt;sass-lang.com&lt;/a&gt;. The words “CSS with Superpowers” appeared on my screen.&lt;/p&gt;

&lt;p&gt;It all looked very fancy. I then quickly realized that the differences between CSS and SCSS are not that large. They are definitely surmountable! &lt;strong&gt;Here I am going to show you some basics to help you get started with SCSS.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;you-will-learn-three-cool-things&quot;&gt;You will learn three cool things:&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;How SCCS does nesting&lt;/li&gt;
  &lt;li&gt;How to use Variables&lt;/li&gt;
  &lt;li&gt;What an extend is&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;differences-between-css-and-scss&quot;&gt;Differences between CSS and SCSS&lt;/h1&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.h1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Georgia&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#111&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.nav-list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#d3d3d3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Okay, cool. Here we have some CSS that basically says, “hey for all headers, make the font-family Georgia and the color black.” Below that we have some nested rules that say the list items under the class “nav-list” will all be a light-grey color. Alright, nice. &lt;strong&gt;Now, let’s write the same thing using SASS.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;nesting-with-scss&quot;&gt;1. Nesting with SCSS&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.h1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Georgia&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#111&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.nav-list&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#d3d3d3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you can see, it’s not that different. I like to compare the way nesting looks in SCSS to the way the &lt;a href=&quot;http://writingcenter.fas.harvard.edu/pages/outlining&quot;&gt;Harvard Outline&lt;/a&gt; looks. Maybe that’s just the nerd in me though. To me, it also makes sense that things would cascade like this. I mean, it is a naturally cascading language anyway. This part of SCSS is easy and I like it better personally.&lt;/p&gt;

&lt;h2 id=&quot;variables&quot;&gt;2. Variables&lt;/h2&gt;

&lt;p&gt;SCSS also introduces the idea of variables. Here’s an example from my own stylesheet:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;header-align&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;container-color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#fff&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;large&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;80px&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;rookie-blue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#40a9f2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here I basically have some rules:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;header align stands in for text-align center.&lt;/li&gt;
  &lt;li&gt;texts within a container will appear white&lt;/li&gt;
  &lt;li&gt;“large” stands in for padding: 80px&lt;/li&gt;
  &lt;li&gt;$rookie-blue is one of my brand color&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I can use these rules inside my style sheet to save myself some time and keep some of my style properties uniform across the site here.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.container-head&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;text-align&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;align&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;22px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;font-weight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;400px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;padding-bottom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;18px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;extend&quot;&gt;Extend&lt;/h2&gt;

&lt;p&gt;Next, SCSS introduces the idea of an extend. Meaning, you can assign a block of code to a variable. Here’s an example.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;k&quot;&gt;@extend&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.image-header&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;145px&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;0px&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;margin-left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;41&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;145px&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This block shows the properties I have assigned to a rounded image at the top of a page. With my extend defined, I can later add a similar image header just by typing in @extend .image-header as if it was another property. &lt;strong&gt;This way, you can include large chunks of style properties that you know you will be using again later just by typing @extend followed by the name you assign to your block code.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;why-use-scss&quot;&gt;Why use SCSS?&lt;/h2&gt;
&lt;p&gt;SCSS is really a bridging tool to help you get comfortable with SASS. It is a preprocessor. For you, this means that you can use CSS and SCSS will compile it into SASS. &lt;strong&gt;In any file with .scss, you can set style rules using SASS, CSS, or SCSS as seen here.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So far, I am comfortable with SCSS and am getting closer to becoming familiar with SASS. When I get there, you will be the first to know. For now, you can read-up on SASS &lt;a href=&quot;http://sass-lang.com/guide&quot;&gt;here&lt;/a&gt; if you are interested. Let me know how it goes for you!&lt;/p&gt;
</description>
        <pubDate>Mon, 20 Jul 2015 09:32:21 -0700</pubDate>
        <link>http://127.0.0.1:4000//2015/07/20/sass.html</link>
        <guid isPermaLink="true">http://127.0.0.1:4000//2015/07/20/sass.html</guid>
        
        
      </item>
    
      <item>
        <title>How to Make a Simple Navigation Menu From Scratch</title>
        <description>&lt;p&gt;Making a navigation bar was one of the first things that I learned to make using only HTML, CSS, and JavaScript. Seems simple, right? Well, I was on day two of learning about web-development. In actuality, it was way over my head. Yet, I was able to get some help that made the process easier to tackle. &lt;strong&gt;What helped the most, was breaking the problem down into manageable steps and learning some general principles about the languages I was working with.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;start-by-learning-some-general-principles&quot;&gt;Start by learning some general principles&lt;/h2&gt;
&lt;p&gt;If you are like me and don’t know much about web development or these three languages, you may approach the problem by looking at a tutorial and just copying their examples and then pasting them into your text editor. Well, what if you knew what elements to actually reference in order to make your menu appear and function the way you want it to? &lt;em&gt;Spending some time to really learn the basic principles of the language you are working in can be super helpful.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Before I made my nav, I spent a couple of nights studying the basics of my three chosen languages. &lt;strong&gt;You might want to try doing the same and really hammering down these ideas:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The difference between an id and a class in CSS&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;HTML syntax - just how to write it, what tags are, etc. You may want to try going over some common things you can do in HTML such as building a list, making text bold, or creating a header. &lt;em&gt;Definitely, go over what divs and span tags are!&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Some basic JavaScript functions. Maybe, learn what a function is as well.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;how-to-approach-the-problem-of-creating-a-menu-for-your-page&quot;&gt;How to approach the problem of creating a menu for your page&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;In my case, I focused on HTML and CSS solutions first. You can start by simply making a list on your page. It should look something like this in a text editor (I use Sublime Text 2 if you are looking for a good one to use):&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Page 1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Page 2&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Page 3&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Okay great, these are the pages that you are going to be listed in your menu! Pretty awesome, right? Next, you are just going to think about how to make these “pages” look and function the way you want them to.&lt;/li&gt;
  &lt;li&gt;You can think about what to do in steps to make it easier if you want. I personally found approaching the process piece-by-piece easier to manage.&lt;/li&gt;
  &lt;li&gt;One place you could start is by thinking about the fact that these pages should be able to be click-able. Meaning, they should be linked. You can add the a href tag to your list to make this happen.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Page 1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Page 2&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Page 3&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Note thAT I’ve put “#” in the place of an actual link for now because I don’t have content or links for these pages yet.&lt;/li&gt;
  &lt;li&gt;So now, depending on what you want the menu to do and look like, you can think about what to do next.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;here-are-some-ideas-for-how-you-may-want-your-menu-to-look&quot;&gt;Here are some ideas for how you may want your menu to look&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;You may want the menu items to be laid out horizontally across your page.&lt;/li&gt;
  &lt;li&gt;Maybe you will want a menu item to simply display specific content when clicked. Well, you can do that with JavaScript&lt;/li&gt;
  &lt;li&gt;You could simply think about the style of the menu.
    &lt;ul&gt;
      &lt;li&gt;Maybe you want the menu to have a background color&lt;/li&gt;
      &lt;li&gt;Or, you want to change the font-size, font-color, or font-family of your text.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;css-properties-that-may-help&quot;&gt;CSS properties that may help&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;font-size:&lt;/strong&gt;
  font-size: 12px
  font-size: 8px&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;color:&lt;/strong&gt;
	color: #fff
	color: #d3d3d3
	color: #000000&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;font-family:&lt;/strong&gt;
	font-family: georgia, sans-serif  (note: consider having a &lt;a href=&quot;http://www.w3schools.com/cssref/css_websafe_fonts.asp&quot;&gt;fall-back font&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;text-transform:&lt;/strong&gt;
	text-transform: uppercase
	text-transform: lowercase
	text-transform: capitalize&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;background:&lt;/strong&gt; (change the color of an element’s background) }&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;text-align:&lt;/strong&gt;
	text-align: right
	text-align: left
	text-align: center&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;display&lt;/strong&gt;: inline (for horizontal menu items for example)
&lt;strong&gt;letter-spacing&lt;/strong&gt; (change the kerning)&lt;/p&gt;

&lt;p&gt;For more CSS properties, you can also &lt;a href=&quot;http://www.w3schools.com/cssref/&quot;&gt;check out W3Schools&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;One thing I can’t help but share:&lt;/strong&gt; I ran into a problem with CSS while working on my practice menu. I wanted the menu to look great on a computer, tablet, or mobile device. Yet, when the width of my page got to a certain point, the menu looked ugly. I asked for help and got an awesome solution in return.&lt;/p&gt;

&lt;p&gt;You can actually create a rule that says “hey, when the width of  someone’s screen gets to “x width,” I want something special to happen. In this example, I wanted an element on my menu to disappear and to make room for other items to appear nicely on a smaller screen. So cool, right?! It looks like this in case you want to try it for yourself.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;k&quot;&gt;@media&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;max-width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;545px&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;nf&quot;&gt;#site-title&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the end, I created a test site that looks like like this:
&lt;img src=&quot;/assets/test-menu.jpg&quot; alt=&quot;creating a menu from scratch&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Again, in my case I worked mostly with HTML and CSS to build a menu. I just wanted to make something simple and didn’t want to spend a lot of time coming up with solutions in JavaScript that I could have otherwise solved with just HTML and CSS.&lt;/p&gt;

&lt;p&gt;Remember, if you are have any trouble you can always Google specific solutions or questions you may have while building out your nav menu. &lt;strong&gt;Thanks for reading guys!&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 24 Jun 2015 09:32:21 -0700</pubDate>
        <link>http://127.0.0.1:4000//2015/06/24/nav-bar.html</link>
        <guid isPermaLink="true">http://127.0.0.1:4000//2015/06/24/nav-bar.html</guid>
        
        
      </item>
    
  </channel>
</rss>
