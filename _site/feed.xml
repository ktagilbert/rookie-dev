<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description></description>
    <link>http://ktgilbert.com//</link>
    <atom:link href="http://ktgilbert.com//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 15 Jul 2015 19:50:33 -0700</pubDate>
    <lastBuildDate>Wed, 15 Jul 2015 19:50:33 -0700</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>How I Customized My Jekyll Home Page Layout</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/jekyllDefaultSite.jpg&quot; alt=&quot;Default Jekyll Layout&quot; /&gt;
When you start work on your new &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll powered site&lt;/a&gt;, you’ll have a super clean layout to work with. It’s pretty awesome. But, if you want to make your site look a little different, you’ll need to make some customizations yourself. To get started, you can open your “index.html” file in the root of your repo to make some layout changes.&lt;/p&gt;

&lt;h1 id=&quot;customizing-your-jekyll-powered-home-page&quot;&gt;Customizing your Jekyll powered home page&lt;/h1&gt;

&lt;p&gt;At first, I didn’t know what I wanted layout wise for my home page. &lt;a href=&quot;/2015/10/17/UI.html&quot;&gt;(see my post here for more info on thinking about your UI Design before coding!)&lt;/a&gt; I tried a lot of different options resulting in weeks of work. In the end I didn’t like anything I tried out but hey, at least I got a lot of practice in SCSS out of the process. Yet, I  was &lt;em&gt;finally&lt;/em&gt; able to settle on &lt;strong&gt;a three column desktop layout to help display my posts they way I wanted to.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;step-1-creating-columns&quot;&gt;Step 1: Creating columns&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/threeColumnLayout.jpg&quot; alt=&quot;Three Column Blog Layout&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I used &lt;a href=&quot;/2016/01/15/learning-flexbox.html&quot;&gt;flexbox properties&lt;/a&gt; to achieve my three column layout. I chose three columns because I wanted to stick with larger images to really showcase each post on my home page. Plus, I just thought that four columns looked too cluttered and boring. The four columns layout was reminiscent of a newspaper spread with two many articles on the page.&lt;/p&gt;

&lt;h2 id=&quot;heres-how-i-made-columns-using-flexbox&quot;&gt;Here’s how I made columns using flexbox:&lt;/h2&gt;

&lt;p&gt;I went into my “sass” folder and created a file called “style.scss” to help contain all of my custom style changes. (Note: I had to include this new stylesheet in the head of my site.) Here is what the SCSS looks like:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scss&quot; data-lang=&quot;scss&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.post-list&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;list-style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;margin-bottom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;inline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;flex-wrap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;margin-bottom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;inline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;align-items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.post-img&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;align-items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;inline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;overflow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;hidden&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;.excerpt&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;align-items&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;baseline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you don’t want to use flexbox, you can achieve the same effect using styled lists and &lt;a href=&quot;/2015/09/05/mediaquery.html&quot;&gt;media queries&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;step-2-including-post-excerpts-in-jekyll&quot;&gt;Step 2: Including post excerpts in Jekyll&lt;/h2&gt;
&lt;p&gt;Out of the box, a Jekyll site displays posts with the help of a post title and post link. But I wanted to include excerpts on my home page with the goal of getting more visitors to click on my posts. I mean, why spend hours writing blog articles if no one clicks on them, right? &lt;strong&gt;I learned that if you give vistors an idea of what they are going to read, they will typically be more apt to click on that post and continue reading if they like the content they’ve been shown already.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Thankfully, Jekyll uses liquid templating to help you include dynamic features throughout your site. All you have to do is reference whatever file you want to include with a liquid tag. If you want, you can check out &lt;a href=&quot;http://jekyllrb.com/docs/templates/&quot;&gt;Jekyll’s documentation on liquid templating here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this case, I didn’t have to create any markup of my own. All I had to do was include some meta info for each of my posts. So, now each of my posts contain some neat meta info that I can reference in my markup:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;---
layout: post
title: &amp;quot;How I Customized My Jekyll Home Page Layout&amp;quot;
date: 2016-01-27 12:43:21
image: &amp;quot;jekyllDefaultSite.jpg&amp;quot;
excerpt: &amp;gt;
 Flex properties are just a way for you to position elements along a vertical and horizontal axis. They also help you proportion elements, which I think is super cool. All you have to do to get started is declare a flex container.
---&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;step-3-using-liquid-tags-to-include-images&quot;&gt;Step 3: Using liquid tags to include images&lt;/h2&gt;

&lt;p&gt;For a while I was cool with just having a post title, link to the post, and an excerpt in this three column layout. But, after a while I realized that all that text was &lt;em&gt;boring.&lt;/em&gt; A simple solution was to include some images.&lt;/p&gt;

&lt;p&gt;They’re a bunch of way to include images for each of your post but I went with what I think is the easiest option. &lt;strong&gt;In the same way that you can include excerpts with liquid tags, you can associate each of your posts with an image.&lt;/strong&gt; Just include “image” in your meta info and pair it with a file in your “assets” folder. Then, you’ll include your liquid tag in the “index.html” file. You can see how I’ve included an image for each of my post in the code snippet above.&lt;/p&gt;

&lt;h2 id=&quot;optimize-your-photos-for-the-web-first&quot;&gt;Optimize Your photos for the web first&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;PRO TIP: To make sure all of your images appear uniformly, make sure you give them a uniform width and height.&lt;/strong&gt; I resized all of my images in Photoshop as either 1300px by 750px or 650px by 375px (for smaller original images) and then clicked “save for web” when I was all done.&lt;/p&gt;

&lt;p&gt;When I save my photos I also like to make sure they load progressively and I adjust the quality of the photos to help reduce the image’s file size (this will reduce your image’s load time!). &lt;a href=&quot;http://madefreshly.com/blog/howto/how-to-properly-optimize-images-for-web-in-photoshop/&quot;&gt;Here’s some more info on optimizing photos.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once my images were in place, I was finally happy with my home page! Believe me, it took months to get my site to look exactly how I wanted it to. Of course, that was my own fault for not mocking up a design before implementing layouts. Plus, I think I spent two whole days just learning how to associate my posts with an image. In the end though, the time was well worth it and I ended up learning a ton.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let me know how your layouts turns out and if you have any questions, feel free post it in the comments below.&lt;/strong&gt; Thanks for reading guys!&lt;/p&gt;
</description>
        <pubDate>Wed, 27 Jan 2016 04:43:21 -0800</pubDate>
        <link>http://ktgilbert.com//2016/01/27/creating-custom-jekyll-homepage.html</link>
        <guid isPermaLink="true">http://ktgilbert.com//2016/01/27/creating-custom-jekyll-homepage.html</guid>
        
        
      </item>
    
      <item>
        <title>Learning About Flexbox (And Why It&#39;s a Great Tool)</title>
        <description>&lt;p&gt;Before I begin telling you about flexbox properties, I want to fill you in on a debate surrounding the tool. When I first started learning about web development, the internet told me not to use flexbox. People were ADAMANT that flexbox was not the best tool to use because modern browsers didn’t support it and there were other tools to use to achieve the same layout results. I saw the rants on reddit and I believed them without doing any research of my own.&lt;/p&gt;

&lt;p&gt;Then, when I was working on my about page, I found myself wrestling with absolute positioning, z-index, and clear properties. It was a huge pain that involved &lt;em&gt;way&lt;/em&gt; too many lines of css. So, I reconsidered my uninformed stance on flexbox. I pulled up a new tab and began researching which browsers supported flex properties (btw, this is what I should have done in the first place!).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In a couple of seconds I found that 95.31% of browsers support flexbox properties.&lt;/strong&gt; Wow, okay, that’s good. AND, because my targeted audience are a bunch of awesome nerds who mostly use Chrome, I quickly decided that I could overlook that remaining 5.69% because I’m pretty sure those who use IE 8 or 9 won’t be visiting my blog anytime soon….or ever.&lt;/p&gt;

&lt;h1 id=&quot;what-browsers-support-flexbox&quot;&gt;What browsers support flexbox:&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/canIUseFlexbox.png&quot; alt=&quot;What Browsers Support FlexBox?&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I go to &lt;a href=&quot;http://caniuse.com/&quot;&gt;Can I Use&lt;/a&gt; to see which browsers and operating systems will/will not support different methods or tools. A quick search on their site showed me exactly which browsers would not be compatible with flexbox properties. &lt;strong&gt;Here is what I found:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Android does not support the flex-wrap property and I must use the -webkit preface if I went to use other flexbox properties.&lt;/li&gt;
  &lt;li&gt;Internet Explore only supports 2012 syntax&lt;/li&gt;
  &lt;li&gt;IE 8 and 9 do not support flexbox at all.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;using-analytics-to-help-determine-which-tools-to-use&quot;&gt;Using analytics to help determine which tools to use&lt;/h2&gt;

&lt;p&gt;To see if I could go forward with using flexbox properties, I took a look at my Google Analytics page to see which browsers my visitors typically use. &lt;strong&gt;A quick look under the Technology tab told me that 0% of my visitors use Internet Explore and around 14% use Android.&lt;/strong&gt; That told me that I would only need to consider the -webkit prefix moving forward and find a work around for flex-wrap. No problem!&lt;/p&gt;

&lt;h2 id=&quot;the-lesson-to-be-learned&quot;&gt;The Lesson to be learned&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/intent/tweet?text=Learning About Flexbox (And Why It&#39;s a Great Tool) url=http://bit.ly/1Sn3ppa &amp;amp;via=KT_a_Gilbert&quot;&gt;&lt;img src=&quot;/assets/webDevTip1.jpg&quot; alt=&quot;Learning About New Web Development Tools&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I wanted to tell you all of this before teaching you about flex properties because I learned two awesome lessons here:&lt;/p&gt;

&lt;p&gt;1) You should always research new tools yourself before believing what anyone else has to say about them.&lt;/p&gt;

&lt;p&gt;2) Take the time to see which browsers and operating systems will support any new tools or methods you want to use before going ahead and using them. A quick look at Google Analytics will then tell you what accommodations you’ll need to make for your users.&lt;/p&gt;

&lt;h2 id=&quot;learning-about-flex-properties&quot;&gt;Learning about Flex Properties&lt;/h2&gt;

&lt;p&gt;Flex properties are just a way for you to position elements along a vertical and horizontal axis. They also help you proportion elements, which I think is super cool. All you have to do to get started is declare a flex container. Then, you declare flex-properties for your flex items. Here is some more info to help:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;&quot;&gt;Treehouse&lt;/a&gt; helps explain that flexbox just gives you a flexible way to layout page content that ends up taking less time and involves fewer changes to your markup.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Flex Containers:&lt;/strong&gt; These can be inline element such as a div, unordered list, or span element.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flex items:&lt;/strong&gt; Flex items are anything inside of your flex containers. They are just your children elements.&lt;/p&gt;

&lt;p&gt;You first step will be to declare a flex container. It will look something like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.your-list&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flex&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That’s all there is to it! After that, you can think about how you want your flex items to behave. Do you want them to be inline elements? Or should they appear in a column? Should any be larger in width than others? What should happen to them on different screen sizes? These are all things that flexbox properties can help you figure out.&lt;/p&gt;

&lt;h2 id=&quot;get-flexible-with-flex-items&quot;&gt;Get flexible with flex items&lt;/h2&gt;
&lt;p&gt;When it comes to creating the layout you want, you’ll need to make a few more declarations to get things exactly how you want them. Here a few to get you started:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;flex-basis:&lt;/strong&gt; This one is my favorites! Flex-basis allows you to determine the proportions of your flex items. Instead of declaring set widths for elements that require multiple media queries at the bottom of your stylesheet to maintain, use flex-basis instead. You can set a length using rem, em, or a percentage to make a particular element bigger or smaller than the others around it.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nf&quot;&gt;#large-picture&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;flex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;basis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;30%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;flex-direction:&lt;/strong&gt; flex items run along the main axis (x) and cross axis (y). If you want to change this, declare a flex-direction in your flex container. Use row, row-reverse, column, or column reverse. Row will give you inline elements and “column” will you give you…well, columns. If you want to flip which items appear first in your layout, then tack on “reverse” to make it happen.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.your-list&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;flex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;direction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;flex-wrap:&lt;/strong&gt;
&lt;img src=&quot;/assets/flexWrap.png&quot; alt=&quot;example of flex-wrap&quot; /&gt;
 flex items, by default, all try to squeeze into one line. If you want them to wrap (say for different resolutions), you can use flex-wrap to make them move down to different lines as needed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Okay, this should get you well on your way to using flexbox!! Thanks for reading guys. Remember, if you have any questions, leave a comment below.&lt;/p&gt;
</description>
        <pubDate>Fri, 15 Jan 2016 04:43:21 -0800</pubDate>
        <link>http://ktgilbert.com//2016/01/15/learning-flexbox.html</link>
        <guid isPermaLink="true">http://ktgilbert.com//2016/01/15/learning-flexbox.html</guid>
        
        
      </item>
    
      <item>
        <title>How to Improve Your Copywriting Workflow</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/copywriter.jpg&quot; alt=&quot;Improve Your Copywriting Workflow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you are a marketing manager or working at a marketing agency, chances are that you have a ton of clients who all have the same deal going on. You’ll need to write some landing page copy for the sale for them. The good news is that you have freelance copy writers on hand to help you do it! Problem solved, right? Well, not exactly.&lt;/p&gt;

&lt;p&gt;The problem with many agencies is that they only have 5-10 freelancers on hand at any time. Meaning, each writer is pumping out around 10 or more versions of the same article for each sale or event that comes up.&lt;/p&gt;

&lt;p&gt;The traditional formula is to have that freelancer re-write an intro and conclusion for each version and update any location details. Don’t forget, they also have to look up each location, find landmarks to mention, get all the info correct, and copy-edit their article around 3 times once it is finished before turning back in a final product for you to review. Then, you’ll have someone on your staff edit it again. Once that is all done, you will finally publish it to the client’s site. Wow, just typing that was exhausting!&lt;/p&gt;

&lt;p&gt;We are all trying to accommodate Google, right? So we abide by these rules and end-up forcing our copywriters to write the same article over and again. In most cases the process works fine. &lt;em&gt;But is it really working well enough for you?&lt;/em&gt; Let’s think about where the process is potentially breaking down.&lt;/p&gt;

&lt;h1 id=&quot;the-three-things-that-may-be-breaking-your-copywriting-workflow&quot;&gt;The three things that may be breaking your copywriting workflow&lt;/h1&gt;

&lt;p&gt;1) You writers are becoming bored and burnt out by writing the same thing over and again. Meaning, they are becoming apathetic. Why? It’s not because they are lazy. &lt;strong&gt;It’s because they are being forced to do a monotonous task, which is naturally leading them toward disinterest.&lt;/strong&gt; The task is no longer creative but instead formulaic. More than that, once a writer has to do more than 5 of these at a time, they begin to skim rather than give your assignment the attention it deserves.&lt;/p&gt;

&lt;p&gt;2) You are missing deadlines because you have to keep going back to give your writer more instructions in order to get the copy you want.&lt;/p&gt;

&lt;p&gt;3) Your writers are too scared to tell you that your process isn’t working for them. The fear is that once they speak up, they will be replaced because of how many other content writers are out there that would be happy to take over for them.&lt;/p&gt;

&lt;p&gt;So to make your copywriting workflow actually work, some things need to happen. First, try asking yourself some questions. &lt;strong&gt;I suggest sitting down with a new document and thoroughly writing out your answers to the questions below so that you can see how to improve your process before even having to read this rest of this article.&lt;/strong&gt; OR, &lt;a href=&quot;/downloads/questionstoHelpYouImproveYourCopyWritingWorkflow.pdf&quot;&gt;download these questions here&lt;/a&gt; and save them for your next meeting!&lt;/p&gt;

&lt;h2 id=&quot;questions-to-help-you-improve-your-copywriting-workflow&quot;&gt;12 Questions to help you improve your copywriting workflow&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Are you giving your writers relevant persona information?&lt;/li&gt;
  &lt;li&gt;Are you providing your writers with a consistent style guide that is thorough?&lt;/li&gt;
  &lt;li&gt;Have you been expecting your writers to assume what they should be doing at any point during their assignment?&lt;/li&gt;
  &lt;li&gt;Did you ask your writers to read over some examples of content they should model their work after?&lt;/li&gt;
  &lt;li&gt;Are your writers actually reading the examples?&lt;/li&gt;
  &lt;li&gt;Do you check-in with your writers? Have you asked them how they are doing or to give you any feedback?&lt;/li&gt;
  &lt;li&gt;Are you making sure your writers feel valued?&lt;/li&gt;
  &lt;li&gt;Have you explained the specific goal of each writing assignment to you writers?&lt;/li&gt;
  &lt;li&gt;Do they know about your conversion needs?&lt;/li&gt;
  &lt;li&gt;Have they been told about the importance of effective CTA’s?&lt;/li&gt;
  &lt;li&gt;Have you told them what keywords to focus on?&lt;/li&gt;
  &lt;li&gt;Is there a clear, hard deadline in place for each stage of the assignment?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Okay, now that you have your answers, you can already begin to see where you could be making improvements in your workflow.&lt;/p&gt;

&lt;p&gt;I am asking you to do this small assignment because too often I have seen companies devalue their writers. The assumption is that anyone can write. This happens because employees at these companies already know the company voice. They have been around for a while and have read all of the marketing copy and company brochures. They could write a blog post or article in just one afternoon because they know all there is to know. So the assumption is that professional writers will have no problem completing the assignment either. There is also the assumption that writing is easy.&lt;/p&gt;

&lt;h2 id=&quot;these-two-assumptions-are-detrimental-for-your-business&quot;&gt;These two assumptions are detrimental for your business.&lt;/h2&gt;

&lt;p&gt;Here is why:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Your freelance writers know next to nothing about your company. On top of that, they are being paid to write not research. To them, it doesn’t make sense to waste their time reading your examples or memorizing the company voice if they are only going to be getting $20 to write a flawless blog post at the end of the day.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Writing is harder than you think it is. There’s a reason English, Journalism, and Creative Writing are whole fields of study. Professional writers have most likely spent four years in post-secondary classes learning about grammar, being quizzed on various style guides, formatting papers just right, and being critiqued on sentence structure and word choice. They have also read everything put in front of them from articles by Gloria Steinem to novels and plays by Chaucer, Melville, Hawthorne, Tolstoy, Shakespeare, Austen, you name it!! Some have even taken the GRE.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But now, they are being tasked with writing for you and they are finding that your task is much more difficult than the ones they had in school. &lt;strong&gt;It is more difficult because they are either not being given clear instructions OR they are not being given enough time or money to give you what you are looking for.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I can tell you from personal experience that each article I write for a client or franchise takes me around 4 hours to create. Even after four hours, my managers tell me to slow down at work so that I don’t miss any mistakes. Each time, I notice that around the 3rd article I edit, I stop caring. The same goes for when I’m the one copy editing these articles. Around the 10th time I read the same repeated phrase it’s almost as if I lose the ability to read carefully. My mind goes numb instead and I effectively become useless to my manager and my company. The process just breaks down and at the end of it all writers only earn about $20-$30 their time my time.&lt;/p&gt;

&lt;h2 id=&quot;heres-the-thing-your-content-is-super-important&quot;&gt;Here’s the thing: your content is SUPER important.&lt;/h2&gt;

&lt;p&gt;To fix the process, let’s remember that content is king right now! Meaning, you should be treating it like the king. It (and by extension your writers) should be your top priority as they are one of your most valuable resources. The best thing you can do to treat your content and your writers like kings is to give them all of the information you can to make their job perfectly clear and work to reduce their frustration during assignments. &lt;em&gt;So, go ahead, ask yourself those 12 questions at the beginning of this article to help yourself get better copy from your writers!&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;whats-the-solution&quot;&gt;What’s the solution?&lt;/h2&gt;

&lt;p&gt;The best solution I can offer you is to simply try hiring more writers. Get more team members in your department or find more qualified freelancer to contribute to copy-editing. Then, get multiple people to help copy edit. You can even delegate the task to your interns as well to help. &lt;strong&gt;But it really is important that you spread out assignments between more writers to avoid being handed mediocre copy.  Afterall, this copy is important to you and your client so why would you trust it to someone who is going to become a zombie after a certain word count or hour of work?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Another solution is to assign each a writer just one-three clients rather than 10-30 articles for one sale. That way, they will AT LEAST have different topics to write about and that will help fuel their interest and motivation.&lt;/p&gt;

&lt;p&gt;Now that you have two great solutions in front you, the best thing you can do moving forward is  to&lt;a href=&quot;/downloads/questionstoHelpYouImproveYourCopyWritingWorkflow.pdf&quot;&gt;download the 12 questions to help you improve your copywriting workflow&lt;/a&gt; and fill them out with your team. It will only take 15 minutes and save you whole days of work as you improve your workflow!&lt;/p&gt;

&lt;p&gt;Let me know what you think and thanks for reading guys!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/downloads/questionstoHelpYouImproveYourCopyWritingWorkflow.pdf&quot;&gt;&lt;img src=&quot;/assets/12Questions.png&quot; alt=&quot;12 Questions to Help You Improve Your Copywriting Workflow&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 03 Dec 2015 08:32:21 -0800</pubDate>
        <link>http://ktgilbert.com//2015/12/03/content-workflow.html</link>
        <guid isPermaLink="true">http://ktgilbert.com//2015/12/03/content-workflow.html</guid>
        
        
      </item>
    
      <item>
        <title>An Intro to UI Design Basics</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/uxpic.jpg&quot; alt=&quot;Learning About UI Design&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A few days ago, I launched a new design for the blog here. I’m excited but also wanted to create a post about why the need for a re-design. If you have been following me for a while you will have noticed that my blog has gone through a few different looks. Here is why: one of the reasons I made this blog was because I wanted to work on a project that would help me learn and practice front-end web development. The site is a tool for me to experiment and learn with. One of the lessons I learned later -  after how to make a site and create a stylesheet - is how to implement a UI Design that works.&lt;/p&gt;

&lt;h1 id=&quot;what-is-ui-design&quot;&gt;What is UI Design?&lt;/h1&gt;
&lt;p&gt;UI design stands for user interface design. It entails creating an interface that works for your targeted user. If you are a UI Designer, you have to think about what your user is going to respond well to and create something that captures the purpose of your site. Here is a good quote that may help you understand better&lt;/p&gt;

&lt;h3 id=&quot;user-interface-ui-design-focuses-on-anticipating-what-users-might-need-to-do-and-ensuring-that-the-interface-has-elements-that-are-easy-to-access-understand-and-use-to-facilitate-those-actions-ui-brings-together-concepts-from-interaction-design-visual-design-and-information-architecture&quot;&gt;“User Interface (UI) Design focuses on anticipating what users might need to do and ensuring that the interface has elements that are easy to access, understand, and use to facilitate those actions. UI brings together concepts from interaction design, visual design, and information. architecture.”&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Some key concepts that go into creating a solid UI Design:&lt;/strong&gt;
- knowledge of color theory
- font choice
- readability
- consideration of how the site will look on different platforms/screen sizes
- use contrast
- use of spacing
- organization of content
- alignment of text, images, and inputs
- site navigation
- branding
- consistency
- purposeful page layout
- hierarchy of text&lt;/p&gt;

&lt;p&gt;I’m going to touch on a few of these components today to help you get on your way to designing a great site. I do want to note that I am not an expert but I do have a passion for UI Design. I formed my knowledge of UI Design just by drawing on a bunch of different experiences I’ve had. I knew a little bit about branding from my experience in marketing and I studied color theory during various art courses. Then, I realized I also knew what I know about typography, hierarchy, spacing, and readability from my days spent laying out newspapers. After that, I just used Google to help me learn more. &lt;strong&gt;So I am also sure that if you draw on your various experiences that you know a lot too! More than you would expect probably.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;color-theory&quot;&gt;Color theory&lt;/h2&gt;

&lt;p&gt;Great sites make great use of color. More importantly, they chose their colors for specific reasons. They seek to create a color palette that is harmonious, creates contrast, is vibrant,  elicits certain responses from users, and captures the purpose of the site. If you have taken any art class, you will have studied colors. If you can remember that class, you will probably recall that certain colors elicit certain responses.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/colortheory1.jpg&quot; alt=&quot;Color Theory&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/colortheory2.jpg&quot; alt=&quot;Color Theory Basics&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So when you are working on a site, you can try thinking about how you want your users to react to the colors on the page. For example, if you have a site about sharing knowledge, you could try using a color palette that includes green, blue, black and white, or grey. For this blog, I stuck to shades of blue, black, white, grey, and orange. I chose these colors because I wanted to associate the site with knowledge while still incorporating some of my own personality which is a bit whimsical. I also wanted the content to be easily readable and to avoid colors that would be overwhelming.&lt;/p&gt;

&lt;h2 id=&quot;font-choice-readability&quot;&gt;Font choice/ Readability&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/creativemess.jpg&quot; alt=&quot;font pairing for web design&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When you begin to think about your fonts, I suggest spending some time on Google Fonts to find 2-3 that will work for your site.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Pro tip: pairing a sans-serif fonts with a serif font will help provide balance.&lt;/li&gt;
  &lt;li&gt;Think about the color of your text. Will your combinations be harsh on the eyes? Will there be too much contrast? Think about what you like to read. Do you want black text on a white background or would grey text on a creamy background be better for your purpose?&lt;/li&gt;
  &lt;li&gt;Put some careful thought into how large or small you want your fonts to be. Remember, think about hierarchy. Take time to decide how large all of your headers will be and then decide on how large the paragraph text will be in relation.&lt;/li&gt;
  &lt;li&gt;Finally, consider how wide he content on your page is? Does it span the whole width of the screen without any margins? If so, you may want to spent some time reading &lt;a href=&quot;https://www.google.com/design/spec/material-design/introduction.html&quot;&gt;Google’s material design guidelines&lt;/a&gt; -  I found it super helpful!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;navigation&quot;&gt;Navigation&lt;/h2&gt;

&lt;p&gt;The first thing you should consider is how you want to your users to be able to navigate on your desktop site vs. your mobile site. Mobile v. Desktop definitely require different considerations! You can save the hamburger icon for your mobile site where space is limited (I learned this lesson the hard way!). You don’t need it for your desktop site because space isn’t an issue there. Instead, focus on creating a menu that is easy to find and use.&lt;/p&gt;

&lt;p&gt;Then, on mobile site you can think about simplifying things and strategically using your limited screen real estate. When you are working on the mobile design site, you can think about using a menu that slides down from an icon and then goes away when the user wishes to close it.&lt;/p&gt;

&lt;h2 id=&quot;consistency&quot;&gt;Consistency&lt;/h2&gt;

&lt;p&gt;Consistency is simple. Once, you have gone through and made all your initial design decisions go through them again. This time ask yourself if you use your colors consistently across the site. Then do the same for everything else you have decided on. Make sure your buttons all look the same. Make sure your icons are uniform. Make sure your margins are consistent. Make sure your hover effects are appropriately uniform. &lt;em&gt;Seriously, go through everything.&lt;/em&gt; There’s even a bonus for being consistent with your design elements - it will help you avoid repeating code (as long as you utilize the purpose of classes vs. id’s).&lt;/p&gt;

&lt;p&gt;Okay, these are just some of the basics I wanted to touch on. I hope that they will help you as you learn more about UI Design.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The best lesson here is to design your site before creating it!&lt;/strong&gt; Don’t follow my lead and make 3 different designs for one site. I was dumb because I was new to everything. Instead, sit down with a sketch pad, PhotoShop,  or whatever else you want to use and think about how the site should look and function. Then make a plan and put it into action.&lt;/p&gt;

&lt;p&gt;Let me know how it goes!&lt;/p&gt;
</description>
        <pubDate>Sat, 17 Oct 2015 05:26:00 -0700</pubDate>
        <link>http://ktgilbert.com//2015/10/17/UI.html</link>
        <guid isPermaLink="true">http://ktgilbert.com//2015/10/17/UI.html</guid>
        
        
      </item>
    
      <item>
        <title>Tutorial: Making a Responsive Navigation Bar</title>
        <description>&lt;p&gt;Earlier, I showed you &lt;a href=&quot;http://rookie-dev.herokuapp.com/2015/06/24/nav-bar.html&quot;&gt;how to make a nav bar from scratch using just HTML and CSS&lt;/a&gt;. I really believe creating a nav bar is a great first project for anyone learning about HTML and CSS/SCSS. Now, if you want to incorporate some jQuery into your site, you can take the project one step further with a nav bar that has some functionality.&lt;/p&gt;

&lt;p&gt;When I redesigned this blog my nav bar was the first thing I wanted to change. I had a simple, static navigation that was pretty boring. So I took a look at other sites and noticed that their nav bars changed colors as users scrolled down.&lt;/p&gt;

&lt;p&gt;Now, I didn’t want a nav bar that changed colors just for the fun of it. I wanted it to solve a problem I was having. I was really looking for a super clean, all white nav bar. Yet, when that same element reached some text or an image, the menu text overlapped and became unreadable. &lt;strong&gt;I realized that I needed the nav bar to change colors when it reached these elements.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the end, I was able to create a nav bar that changed colors when the user scrolled down to a certain element on the window. This is what I started out with.&lt;/p&gt;

&lt;h3 id=&quot;nav-bar-to-start-with&quot;&gt;Nav Bar to Start With&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/normalnavbar.png&quot; alt=&quot;Simple Nav Bar&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;how-to-approach-the-problem&quot;&gt;How to Approach the Problem&lt;/h1&gt;

&lt;p&gt;If you are looking to build a great, responsive nav bar that utilizes some jQuery here is how to start. First, you can navigate to where you are including your javascript. You can start by making sure you have a jQuery library included along with your other script tags. (I keep mine in my head.html file.)&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;https://ajax.googleapis.com/ajax/libs/jquery/2.1.4/jquery.min.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Next, let’s review some of the markup you will need for this project.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;menu&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;menu-item&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;menu-item&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Menu Item 1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;menu-item&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/menu-item2&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Menu Item 2&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;menu-item&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/menu-item3&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Menu Item 3&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here is some SCSS as well:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nf&quot;&gt;#menu&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;text-align&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;brown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;40px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fixed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;transparent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;z-index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.menu-item&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;list-style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;inline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;14px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Okay, now you have a static menu to work with.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;set-up-your-problem&quot;&gt;Set Up Your Problem&lt;/h2&gt;

&lt;p&gt;Next, you can start by commenting out what you will need to do to make the nav bar change colors. Commenting out the problem is a great first step in solving your problem. This method really helps prevent me from getting overwhelmed by a problem. Instead, I can just start by simply solving the first step and then go from there until the rest has been solved as well.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//desktop nav bar&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//when user scrolls&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//and they reach an element (first &amp;lt;p&amp;gt; tag &amp;amp;&amp;amp; first&amp;lt;h1&amp;gt; in my case)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//change #menu.css background color&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//change .menu-item color&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// else&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//#menu.css should have a transparent color&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//.menu-item.css should have color: #1D1E18 - brown&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So far, we know what we want our menu item to do. To solve it though, you can try and store some variables to make things a little easier. Here, you can store 3 sets of info:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;where a user will start their scrolling&lt;/li&gt;
  &lt;li&gt;When the nav bar should change color&lt;/li&gt;
  &lt;li&gt;What the offset will be&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scroll_start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;startchange&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;p:first&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;startchange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Okay, now you can go in and fill in the rest of your commented out steps. First, you know that you are going to want an if/else statement. We know this because you have two case scenarios for your nav bar depending on where the user is scrolled to on the window. So we can write something that looks like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;startchange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;img&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scroll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;scroll_start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scrollTop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scroll_start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;#menu&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;background-color&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;#111&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;.menu-item&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;color&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;#fff&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;.menu-item&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;color&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;#fff&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You’ll notice that at the beginning of my if statement, I used the or operator. You don’t have to include an or statement if you don’t need it.  I include it here because when I tested my nav bar I noticed that on my about page, the first element was actually an image. Meaning, I needed the nav to change to back to a white background with black text when it reached this image and when it reached the first &amp;lt;p&amp;gt; tags on a page.&lt;/p&gt;

&lt;p&gt;For you, it may help to look at your pages and see what elements your nav will hit first. It is likely that this will either be the first div tag or the first h1 tag. Either way, just make sure to include what element will indicate when a style change is needed at the beginning of your if statement.&lt;/p&gt;

&lt;p&gt;Next, you can write your else statement. The else statement will provide the css info you need to change when the menu goes back to it’s initial state at the top of a window. Now, you are not declaring what the menu will look like normally. Instead, the else statement will help your menu toggle back to its normal state if a user scrolls &lt;em&gt;back up&lt;/em&gt; to the top of the screen.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;#menu&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;background-color&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;transparent&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;.menu-item&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;color&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;#1D1E18&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Now you’re done!&lt;/strong&gt; In the end, you will get a nav bar that changes state on scroll. It will look something like this:&lt;/p&gt;

&lt;h2 id=&quot;nav-bar-that-changes-on-scroll&quot;&gt;Nav Bar that Changes on scroll&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/responsiveNav.jpg&quot; alt=&quot;Responsive Nav Bar&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Alright, hope this helps guys! &lt;strong&gt;Let me know how your nav bar turns out. I’d love to see links to your end results.&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 23 Sep 2015 10:00:00 -0700</pubDate>
        <link>http://ktgilbert.com//2015/09/23/responsive-nav-bar.html</link>
        <guid isPermaLink="true">http://ktgilbert.com//2015/09/23/responsive-nav-bar.html</guid>
        
        
      </item>
    
      <item>
        <title>Breaking Into Web Development (In Small Steps)</title>
        <description>&lt;p&gt;It used to be that the words “computer programmer” conjured up memories for me of people in the math and science building of my university. They were the people who arrived 30 minutes before class to consult with each other on complex problems. They said things like “back face curling”, “code refactoring,” “data flow analysis, “and heuristic evaluation.” They also threw around words that sounded completely ridiculous to me (e.g unicorn, ruby gem, brain fuck, Boomerang, Emerald, etc.) What was I doing there? Waiting for my required Astronomy 101 course to start and browsing Pinterest on my phone. They were geniuses in my book.&lt;/p&gt;

&lt;p&gt;The thing is, yes, they were smart. They were computer science majors who were taking advanced calculus. They spent all their time reading computer science textbooks and solving algorithms. Yet, to be a computer programmer you don’t have to know advanced calculus, at least not to get started. You don’t even need a computer science degree (although more power to you if you have one!).&lt;/p&gt;

&lt;p&gt;If you really want to get into the field, it just requires some dedication and a willingness to learn as well as ask questions. &lt;strong&gt;I recommend reading this blog post to learn how I got the courage to get into web development and to see what skills to learn first. After that, you will hopefully be able to see that breaking into web development isn’t &lt;em&gt;that&lt;/em&gt; scary. as long as you tackle it in small steps.&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;moving-beyond-wordpress-to-create-my-first-project&quot;&gt;Moving beyond Wordpress To Create My First Project&lt;/h1&gt;

&lt;p&gt;I don’t know why your are interested in web development and I’m not going to assume I do. Maybe it is because you want to do something creative and you have a strong interest in tech already. Maybe, you have been in love with web development since you were a teenager (and in this case you probably know more about the subject than I do). Or, you are like me and arrived at the idea of pursuing web development a little later in life. I do know that getting into web development is intimidating. &lt;strong&gt;It shouldn’t be though!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For me, the moment I knew I wanted to be a front-end developer came one-month into unemployment. I had lost interest in much of my former career once I was no longer being paid to do it. Instead, I spent my days messing around with a Wordpress blog that I used to have. That is until the theme I was using had an update that turned my content into an enlarged, pixelated mess. (Has anyone ever had this happen to them before??)&lt;/p&gt;

&lt;h3 id=&quot;my-pixeleted-mess&quot;&gt;My Pixeleted Mess:&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/pixelmess.png&quot; alt=&quot;Mobile UI Mock Up&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I spent two weeks re-doing the site. The funny thing is working on the redesign was the most fun I had since being employed. I didn’t even mind that I was sitting at a kitchen table rather than a desk. I didn’t care that I wasn’t being paid to do the work. The work was just fun.&lt;/p&gt;

&lt;p&gt;Once the site was back to how I liked it, I was even a bit proud of what I had done. In fact, the site looked even better than before because I had found a way to inspect elements and figure out their selectors to make some custom changes of my own.&lt;/p&gt;

&lt;p&gt;I showed off my work to my S.O. at dinner once it was complete. I pulled the site up on my phone and asked him if he would take a look. He is a self-taught back-end developer who never ceases to impress me with all the cool things that he is able to do. Showing him my work was kind of intimidating to be honest because he really knows how sites should work and function. Yet, he was smiling when he saw what I had done. He then looked up at me and very carefully suggested that I go into front-end development.&lt;/p&gt;

&lt;p&gt;The thing is, I had been thinking about the same thing for months - ever since I learned how to fix site bugs at work. That was when I first began to study HTML and Markdown. Still, I wasn’t sure if I could be a front-end developer.&lt;/p&gt;

&lt;p&gt;I didn’t think that I was smart enough to do that. You see, I studied creative writing in college. From there, I thought that I was going to spend my adult life as a secretary or admin assistant while writing a novel during coffee fueled nights. Going into web development was something I had never thought that I could do. &lt;em&gt;It simply didn’t fit in with the idea I had been forming for myself.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;where-to-start---breaking-the-process-down-into-small-steps&quot;&gt;Where to start - breaking the process down into small steps&lt;/h2&gt;

&lt;p&gt;That night though I said good-bye to that idea because it just wasn’t working for me. Instead, My S.O. and I sat down together and went over some basic concepts. I learned about arrays, operators, and zero-based indexes in JavaScript. Then, we googled &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; together and my S.O. ran some commands to create a Jekyll powered static blog site that I could work on. &lt;strong&gt;It took us about three hours for me to see that I had it in me to learn a programming language &lt;em&gt;and&lt;/em&gt; that I had a means to create a site from scratch.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;My task for the next day was to learn how to add new pages to the site and begin creating a design I liked. I had to learn how to select elements for manipulation in JavaScript, how to maintain clean, modular code, and how to out specify the base stylesheet included in the Jekyll directory. This was all kind of overwhelming.&lt;/p&gt;

&lt;p&gt;What helped was focusing on one task at a time. For example, if I could just learn what the DOM was before learning how to traverse it, I could prevent a panic attack. This approach helped A LOT! I started off by learning three basic skills. HTML, CSS, and JavaScript.&lt;/p&gt;

&lt;p&gt;It may help you to take this same approach. &lt;strong&gt;Here are some steps to help you get started!&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;note-you-can-learn-these-in-whatever-order-you-wantneed&quot;&gt;Note: You can learn these in whatever order you want/need.&lt;/h4&gt;

&lt;h2 id=&quot;step-one-make-a-github-account&quot;&gt;Step One: Make a GitHub account&lt;/h2&gt;

&lt;p&gt;If you want to begin a project of your own, I first suggest you make a GitHub account. Someone once told me “GitHub or get out.” They meant, you need to have a GitHub account before an interviewer will take you seriously. It’s smart advice. Having a GitHub account helps employers know that you have worked on a project before, that you know a little something about &lt;a href=&quot;https://git-scm.com/book/en/v2/Getting-Started-About-Version-Control&quot;&gt;version control&lt;/a&gt;, and that you’re interested in what others in the development community are up to.&lt;/p&gt;

&lt;p&gt;Just go to &lt;a href=&quot;https://github.com/&quot;&gt;github.com&lt;/a&gt; and create an account. You can then create a new repository for the project you want to work on and go from there!&lt;/p&gt;

&lt;h2 id=&quot;step-two-learn-some-html&quot;&gt;Step Two: Learn Some HTML&lt;/h2&gt;

&lt;p&gt;HTML, or Hypertext Markup Language, is just a way to create a skeleton for how your site will look. For example, it will help you declare where headers will go and where certain blocks of content will be placed on your page. Here are some great steps to help you master it:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Read up on how to write HTML:&lt;/strong&gt; &lt;a href=&quot;http://www.w3schools.com/html/default.asp&quot;&gt;W3Schools&lt;/a&gt; is a great first place to look!&lt;/li&gt;
  &lt;li&gt;Learn the difference between a div and a span: You can think of a div as a dividing element in your markup. It contains and divides certain sections of your layout. A span, on the other hand, is a way to group inline-elements in your document.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Mess around with HTML to create your own custom layouts:&lt;/strong&gt; You can try by working on your own project or creating something in a &lt;a href=&quot;http://codepen.io/pen/&quot;&gt;codepen&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Harness the power of the list! Seriously, you can do a lot with lists when they are combined with CSS.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Learn how to indent properly:&lt;/strong&gt; Elements within element should be indented.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Just know that when someone says “show me your markup,”  - this just means show them your HTML file:&lt;/strong&gt; I’ll admit, I didn’t know this for a &lt;em&gt;long&lt;/em&gt; time!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;step-three-tackle-scss&quot;&gt;Step Three: Tackle SCSS&lt;/h2&gt;

&lt;p&gt;I recommend learning &lt;a href=&quot;http://rookie-dev.herokuapp.com/2015/07/20/sass.html&quot;&gt;SCSS&lt;/a&gt; first. It will make it easier when you are ready to switch to &lt;a href=&quot;http://sass-lang.com/&quot;&gt;SASS&lt;/a&gt; (a very marketable skill).&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Pull up a local version of your project and make changes in the browser:&lt;/strong&gt; This will help you identify your class and ID names. It will also help you better visualize what needs to be tweaked. This way, you can experiment with what some properties do. Seriously, sometimes I just experiment with properties until my layout does what I want it to do. Keep in mind that I always use W3 Schools to check that the solution I arrive is a sustainable/pragmatic choice before actually implementing it.&lt;/li&gt;
  &lt;li&gt;Look at other websites that you admire and dissect their source code. While you are at, find what you like about their site and try to implement those features yourself.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;step-four-get-started-with-javascript&quot;&gt;Step Four: Get Started With JavaScript&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Check out some great resources &lt;a href=&quot;http://rookie-dev.herokuapp.com/2015/08/05/resources.html&quot;&gt;here&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Begin by learning about operators&lt;/strong&gt;: Operators are just ways to perform math or declare conditional statements.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Dive into the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript&quot;&gt;Mozilla Developer Network&lt;/a&gt;:&lt;/strong&gt; Here, you can find out how to traverse your DOM and discover cool new methods!&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Look into jQuery&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Add some events using jQuery to your website.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Solve some algorithms - &lt;a href=&quot;http://adriann.github.io/programming_problems.html&quot;&gt;(easy ones)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;THEN learn more advanced concepts&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;find a project that you want to implement using JavaScript&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;step-five-learn-some-git-commands&quot;&gt;Step Five: Learn Some Git Commands&lt;/h2&gt;

&lt;p&gt;Yes, you need to know about version control. This is your first project, meaning you are most likely the only contributor. Yet, if you picture yourself working in web development, you will be working on a team and they will be using some kind of version control. Version control is a way to prevent people from erasing new implementations accidentally or stepping on each other’s toes during development. For Jekyll specific projects, you will really only need to know a few commands to test your site and make sure all of it’s features work properly. If you want to know some more though, I often reference this list &lt;a href=&quot;https://gist.github.com/hofmannsven/6814451&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;cd (change directory):&lt;/strong&gt; You need to let your command line know what files you will be working with. To do this, you cd into the correct directory. The directory will be the name of folder all of your project files are in.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;jekyll serve:&lt;/strong&gt; start up your local server.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;git check out &lt;em&gt;branch name&lt;/em&gt;:&lt;/strong&gt;  Switch to the branch you want to be working in.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;git branch:&lt;/strong&gt; Find out what branch you are currently in.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;git status:&lt;/strong&gt; See what files have been modified since your last commit.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;git diff:&lt;/strong&gt; See what changes you have made to so far.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;git add:&lt;/strong&gt; Add your changes to a new commit.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;git commit -m “&lt;em&gt;insert message here indicating what you are committing”&lt;/em&gt;:&lt;/strong&gt; Commit your changes to your current branch.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;git push origin &lt;em&gt;branch name&lt;/em&gt;:&lt;/strong&gt; Push your changes to a live environment.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Okay, now you have some great steps to focus on. If you are like me, these steps will be able to help A LOT. A common problem I had while learning was not knowing what to do next. I wanted to make this post to help others avoid this problem. Once you have all of these steps mastered, we can talk about overcoming imposter syndrome! &lt;strong&gt;Thanks for reading guys!&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 12 Sep 2015 10:00:00 -0700</pubDate>
        <link>http://ktgilbert.com//2015/09/12/breaking-into-web-development.html</link>
        <guid isPermaLink="true">http://ktgilbert.com//2015/09/12/breaking-into-web-development.html</guid>
        
        
      </item>
    
      <item>
        <title>Learning About Media Queries</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/mediaQuery.jpg&quot; alt=&quot;Learning about media queries&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Say you are working on a website and want it to look great across multiple devices. Meaning, you need your layout to look just as great on phones or tablets as it does on desktop. I mean you worked so hard to make it look wonderful on your desktop computer that you want everyone who sees it to appreciate your work no matter what they are viewing it on, right?&lt;/p&gt;

&lt;p&gt;Well, there are ways to do this. For example, you could use &lt;a href=&quot;&amp;quot;/2015/09/05/mediaquery.html&amp;quot;&quot;&gt;flex properties&lt;/a&gt;. Alternatively, a technique that many use are media queries. Media queries are something that I imagine you will always use, so it’s worth learning about them early on.&lt;/p&gt;

&lt;p&gt;First, let’s start thinking about your site’s layout. When thinking about a layout, you can start by thinking about the way it will look on a desktop.&lt;/p&gt;

&lt;h3 id=&quot;desktop-layout&quot;&gt;Desktop layout&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/rookiedevmockup.jpg&quot; alt=&quot;Mobile UI Mock Up&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After your desktop layout is perfect, you will want to think about how that same site will look on a smaller screen. Ideally, you will think about the problem of a smaller screen before development. For example, you can think about how your layout will look on a mobile device. In the case of the blog here, I changed my home page from a three-column layout to a single layout and created a dropdown menu that I’ve indicated with a navicon. &lt;strong&gt;In development, you can make these layout changes with the help media queries.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;mobile-layout&quot;&gt;Mobile layout&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/rookiedevmobile.jpg&quot; alt=&quot;Mobile UI Mock Up&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;what-is-a-media-query&quot;&gt;What is a media query?&lt;/h1&gt;

&lt;p&gt;You can think of media queries as a tool that will let you change your layout when certain conditions apply (or at certain breakpoints). For example, what if you reduce your screen size to 760px and see that your two-column layout on your home page looks way to busy. Well, then you would want to include a rule in your stylesheet that says that when someone views your site at a screen width of 760px, your home page should change to a one-column layout. Now your home page looks much better. Awesome!&lt;/p&gt;

&lt;p&gt;To help you gain a grasp on what a media query looks like, you can checkout the example here.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;k&quot;&gt;@media&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;max-width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;457px&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nc&quot;&gt;.page-heading&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;30px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;nf&quot;&gt;#line-one&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3em&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;padding-top&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;40px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;nf&quot;&gt;#line-two&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4em&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is an example of a media query I used to help make this blog’s logo. I made it to help make the surrounding div shrink once a user’s screen size reaches 457px or smaller. I reached the number 457 by basically shrinking my window until the logo and page-heading div looked ugly. That was my breakpoint and the width at which I needed to make a new rule within my stylesheet.&lt;/p&gt;

&lt;h2 id=&quot;when-to-use-a-media-query&quot;&gt;When to use a media query&lt;/h2&gt;
&lt;p&gt;I have found that while you are developing your site, you should consistently check how new features look at different screen sizes. If you find that a piece of your content looks ugly at a certain screen width, then you should either consider using a media query. &lt;strong&gt;Just remember to base your media query rules on how your content looks rather than on popular device widths.&lt;/strong&gt; If you base your rules on device widths, you will have to keep adding more and more rules as new products emerge. This can quickly lead to overly complex code and a lot of wasted time (which I know you don’t want).&lt;/p&gt;

&lt;p&gt;Yet, before you define a media query rule, it can also help to remember that many layout problems can be fixed by using more flexible measurement units. For example, using percentages &lt;a href=&quot;https://css-tricks.com/why-ems/&quot;&gt;or ems&lt;/a&gt; when it comes to defining font sizes. Yet, if your overall layout isn’t working at a certain screen width, well then you have encountered a breakpoint and should probably consider using a media query.&lt;/p&gt;

&lt;p&gt;A breakpoint is a point where your layout &lt;em&gt;breaks&lt;/em&gt;, indicating that your layout should change. You can see breakpoints in action by going to a site and seeing how the layouts alter at certain points. &lt;a href=&quot;https://css-tricks.com/&quot;&gt;CSS Tricks&lt;/a&gt; is a great example if you want to check it out. Simply make the screen at CSS Tricks smaller. You will notice that the sidebar on the right hand of the screen becomes thinner and thinner until it disappears completely at mobile-sized width. &lt;strong&gt;Each little micro-change in the CSS Tricks layout represents a breakpoint.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now, let’s look at the different kinds of media queries that you can use for your own project.&lt;/p&gt;

&lt;h2 id=&quot;max-width-and-min-width&quot;&gt;Max width and min width&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Here is a technical definition:&lt;/strong&gt; The width media feature describes the width of the rendering surface of the output device (such as the width of the document window, or the width of the page box on a printer).&lt;/p&gt;

&lt;p&gt;What this really means is that you can make a media query rule that determines what happens to your layout at a certain width. You can think of Min and Max as replacements for the ‘&amp;lt;’ and ‘&amp;gt;’ operators. You can see the Max width media query in action in my example above.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Min will change layouts when the change should occur at a length that is greater or equal to the pixel width you define.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Max width will apply at a width that is less than or equal to the width you define.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;portrait-and-landscape-properties&quot;&gt;Portrait and landscape properties&lt;/h2&gt;
&lt;p&gt;I am most excited about these properties! I just recently learned about portrait and landscape properties myself thanks to &lt;a href=&quot;http://teamtreehouse.com&quot;&gt;Treehouse&lt;/a&gt;. If you are making a mobile first design, then you probably want rules that will make your layout look great on smaller screen sizes. Well, if you have been considering breakpoints while implementing new features, then I am sure you will have this covered.&lt;/p&gt;

&lt;p&gt;Yet, what if your user wants to view your project in a landscape mode? For example, what will happen to your layout when a user rotates their phone or tablet? Well, you can make rules for these instances as well. You can see examples of the portrait and landscape properties in action over on &lt;a href=&quot;http://stephen.io/mediaqueries/&quot;&gt;Stephen Gilbert’s site here&lt;/a&gt;. In general, you can begin defining style rules following the syntax below:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;k&quot;&gt;@media&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;orientation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;portrait&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@media&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;orientation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;portrait&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;media-query-syntax&quot;&gt;Media query syntax&lt;/h2&gt;
&lt;p&gt;I bet you noticed that in the portrait and landscape example we used the word “and” as well as further specifiied our media query within a set of parentheses. One thing I have found is that if you are having trouble remembering how to write out a media query rule, you can draw on what you know about &lt;a href=&quot;http://www.w3schools.com/js/js_operators.asp&quot;&gt;operators&lt;/a&gt;. For example, if you want two rules that apply at once, you should use “and” in the same way you would use &amp;amp;&amp;amp; in JavaScript. You will even see that you can even write something with multiple specifications like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;k&quot;&gt;@media&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;handheld&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;max-width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;15em&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;where-to-learn-more&quot;&gt;Where to learn more&lt;/h2&gt;

&lt;p&gt;Okay, now I’ve shown you some key media query properties that you can use while working on your current or next project. I didn’t cover everything that can be done with media queries. There are still many other things you can do. For example, you could also consider color-index, aspect-ratio, and even other Mozilla specific media features. I’ll let you guys look into these yourself though &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries#Media_features&quot;&gt;over on MDN&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thanks for reading guys! Hope this post helps.&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 05 Sep 2015 10:00:00 -0700</pubDate>
        <link>http://ktgilbert.com//2015/09/05/mediaquery.html</link>
        <guid isPermaLink="true">http://ktgilbert.com//2015/09/05/mediaquery.html</guid>
        
        
      </item>
    
      <item>
        <title>Great Resources For Learning JavaScript</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/LearnJs.jpg&quot; alt=&quot;Resources for learning JavaScript&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I know from experience that learning JavaScript can be &lt;em&gt;very&lt;/em&gt; challenging. If you are learning about JavaScript in school or are teaching yourself, I wanted to help you find some great resources that may help. It took me a couple of months to finally be comfortable in the language. I tried books, blogs, in-person instruction, forums, and videos. Some helped and others didn’t as to be expected. In the end, here is a compiled collection of some the better resources I was able to find.&lt;/p&gt;

&lt;h1 id=&quot;books&quot;&gt;Books:&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;ftp://91.193.236.10/pub/docs/linux-support/programming/JavaScript/%5BO%60Reilly%5D%20-%20JavaScript.%20The%20Definitive%20Guide,%206th%20ed.%20-%20%5BFlanagan%5D.pdf&quot;&gt;JavaScript the Definitive Guide&lt;/a&gt;:&lt;/strong&gt; Okay, it’s long. So just don’t read the whole thing, okay? I found it helpful to read the first 5-10 chapters. It helped me understand what was actually going on in JavaScript. What I found the most helpful is the time the author spent to explain each and every line of his examples. Meaning, you will never have to guess at what a piece of code is doing. Instead, everything is totally straight forward. While reading the Definitive Guide I was able to finally understand some important concepts in JavaScript. Other books would skim over these same concepts as if they were easy to comprehend. So, if you’re like me and having some problems understanding some of the basics, this might be the book for you.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://shop.oreilly.com/product/9780596517748.do&quot;&gt;JavaScript the Good Parts&lt;/a&gt;:&lt;/strong&gt; I would especially recommend this book if you are a visual learner. JavaScript the Good Parts is super easy to skim through and will give you useful info (though, you may have to look up some concepts on Google as it doesn’t go out of its way to help its readers understand everything). I heard that the The Good Parts is a retaliation against the Definitive Guide so it only makes sense that it is shorter and offers a little less explanation. Yet still, it is definitely more useful than other introductions to JavaScript out there.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://eloquentjavascript.net/&quot;&gt;Writing Eloquent JavaScript&lt;/a&gt;:&lt;/strong&gt; Read this only if you know the fundamentals of JavaScript already. The books comes highly recommended by programmers but I really don’t think it should be recommended for those just starting to learn about the language. For example, I initially had no idea what was going on when examples showed up filled with ‘for’ loops and counters or unexplained methods. &lt;strong&gt;However, DO read this if you want to learn how to write better JavaScript or if you want to solve some pretty cool problems that the author includes at the end of each chapter.&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;websites&quot;&gt;Websites:&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;http://www.w3schools.com/js/default.asp&quot;&gt;W3Schools&lt;/a&gt;:&lt;/strong&gt; This is a great go-to resource for anything that may come up. It will cover anything from syntax to basic explanations about what some methods do. It is a trusted resource for many and definitely a good site to check out.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;http://stackoverflow.com/&quot;&gt;Stack Overflow&lt;/a&gt;:&lt;/strong&gt; If you have a question, you can get an answer here. Many use Stack Overflow to debug their code if they are truly stumped. Yet, these days it is more common to just browse through others questions to see if a solution is already out there for you to check out.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;http://jshint.com/&quot;&gt;JsHint&lt;/a&gt;:&lt;/strong&gt; If you don’t know how to debug your own code yet, you can use JS Hint. It will tell what problems are present and where to find them. Yet, it may be better to just look up how to your console to debug yourself.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;http://codepen.io/pen/&quot;&gt;CodePen&lt;/a&gt;:&lt;/strong&gt; Want to just try something out to see how it works? CodePen (which was suggested to me via a reply to this post actually) will give you a workspace to mess around in. It will be your own no-stakes sandbox if you want ever want it.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;http://javascriptissexy.com/&quot;&gt;JavaScript Is Sexy&lt;/a&gt;:&lt;/strong&gt; Java Script is Sexy provides a series of posts for almost thing you could think of concerning Java Script &lt;em&gt;and&lt;/em&gt; and it links to several other awesome resources out there. For example, I used the site to find the subreddits listed below and JavaScript the Definitive Guide.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;some-design-inspirations&quot;&gt;Some design inspirations:&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;http://ajclarkson.co.uk/blog/&quot;&gt;AJ Clarkson’s Site and Portfolio&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;http://www.ashleyfarrand.com/about/&quot;&gt;Ashley Farrand’s Design Website&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;http://www.thisisfreshface.com/&quot;&gt;Fresh Face&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;You can also check out my pinterest board for more web design inspirations &lt;a href=&quot;https://www.pinterest.com/ktagilbert/web-design/&quot;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;miscellaneous&quot;&gt;Miscellaneous:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Subreddits:
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://www.reddit.com/r/webdev/&quot;&gt;r/webdev&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://www.reddit.com/r/web_design/&quot;&gt;r/webdesign&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://www.reddit.com/r/learnjavascript/&quot;&gt;r/learningjavascript&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://teamtreehouse.com/home&quot;&gt;Treehouse&lt;/a&gt;:&lt;/strong&gt; a bunch of videos and challenges to help you learn new languages. Treehouse was my favorite resource. Everyone has their own learning style really but for me, watching videos helped the concepts click in my head. Treehouse mixes information with practical challenges that you type yourself. The mix of info and challenges helps gives concepts in JavaScript a practical implementation. Yes, you can choose to skip over the challenges but I really suggest you at least give them a try for your own sake. Also, note that Treehouse has a subscription fee. It is $25 a month for the basic subscription but there is a 14 day free trial period if you just want to check it out.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are just the best resources that I have been able to find so far. If you find any others that you think should be added to this list let me know and I’ll update this post. &lt;strong&gt;Thanks for reading guys!&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 05 Aug 2015 10:00:00 -0700</pubDate>
        <link>http://ktgilbert.com//2015/08/05/resources.html</link>
        <guid isPermaLink="true">http://ktgilbert.com//2015/08/05/resources.html</guid>
        
        
      </item>
    
      <item>
        <title>How to Start Learning SCSS</title>
        <description>&lt;p&gt;&lt;img src=&quot;/assets/brainstorm.jpg&quot; alt=&quot;First SCSS project&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;bridging-the-gap-between-css-and-sass&quot;&gt;Bridging the gap between CSS and SASS&lt;/h1&gt;

&lt;p&gt;I have a confession. When I first started working on this blog, I had no idea what SCSS was. The language just seemed like something that was going to be extremely difficult to learn. &lt;em&gt;With an already limited knowledge of CSS, I was intimidated.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It turns out that SCSS is not that difficult.&lt;/p&gt;

&lt;h2 id=&quot;what-helped-me-learn-about-scss&quot;&gt;What helped me learn about SCSS:&lt;/h2&gt;
&lt;p&gt;I simply pulled open my computer and read up on SASS. I started by typing in “learning SASS” into Google. I  was then directed to &lt;a href=&quot;http://sass-lang.com/&quot;&gt;sass-lang.com&lt;/a&gt;. The words “CSS with Superpowers” appeared on my screen.&lt;/p&gt;

&lt;p&gt;It all looked very fancy. I then quickly realized that the differences between CSS and SCSS are not that large. They are definitely surmountable! &lt;strong&gt;Here I am going to show you some basics to help you get started with SCSS.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;you-will-learn-three-cool-things&quot;&gt;You will learn three cool things:&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;How SCCS does nesting&lt;/li&gt;
  &lt;li&gt;How to use Variables&lt;/li&gt;
  &lt;li&gt;What an extend is&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;differences-between-css-and-scss&quot;&gt;Differences between CSS and SCSS&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.h1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Georgia&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#111&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.nav-list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#d3d3d3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Okay, cool. Here we have some CSS that basically says, “hey for all headers, make the font-family Georgia and the color black.” Below that we have some nested rules that say the list items under the class “nav-list” will all be a light-grey color. Alright, nice. &lt;strong&gt;Now, let’s write the same thing using SASS.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;nesting-with-scss&quot;&gt;1. Nesting with SCSS&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.h1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Georgia&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#111&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.nav-list&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#d3d3d3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you can see, it’s not that different. I like to compare the way nesting looks in SCSS to the way the &lt;a href=&quot;http://writingcenter.fas.harvard.edu/pages/outlining&quot;&gt;Harvard Outline&lt;/a&gt; looks. Maybe that’s just the nerd in me though. To me, it also makes sense that things would cascade like this. I mean, it is a naturally cascading language anyway. This part of SCSS is easy and I like it better personally.&lt;/p&gt;

&lt;h2 id=&quot;variables&quot;&gt;2. Variables&lt;/h2&gt;

&lt;p&gt;SCSS also introduces the idea of variables. Here’s an example from my own stylesheet:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;header-align&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;container-color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#fff&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;large&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;80px&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;rookie-blue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#40a9f2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here I basically have some rules:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;header align stands in for text-align center.&lt;/li&gt;
  &lt;li&gt;texts within a container will appear white&lt;/li&gt;
  &lt;li&gt;“large” stands in for padding: 80px&lt;/li&gt;
  &lt;li&gt;$rookie-blue was one of my brand colors (before the re-design!)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I can use these rules inside my style sheet to save myself some time and keep some of my style properties uniform across the site here.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.container-head&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;text-align&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;align&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;22px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;font-weight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;400px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;padding-bottom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;18px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;extend&quot;&gt;Extend&lt;/h2&gt;

&lt;p&gt;Next, SCSS introduces the idea of an extend. Meaning, you can assign a block of code to a variable. Here’s an example.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;k&quot;&gt;@extend&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.image-header&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;145px&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;0px&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;margin-left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;41&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;145px&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This block shows the properties I have assigned to a rounded image at the top of a page. With my extend defined, I can later add a similar image header just by typing in @extend .image-header as if it was another property. &lt;strong&gt;This way, you can include large chunks of style properties that you know you will be using again later just by typing @extend followed by the name you assign to your block code.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;why-use-scss&quot;&gt;Why use SCSS?&lt;/h2&gt;
&lt;p&gt;SCSS is really a bridging tool to help you get comfortable with SASS. It is a preprocessor. For you, this means that you can use CSS and SCSS will compile it into SASS. &lt;strong&gt;In any file with .scss, you can set style rules using SASS, CSS, or SCSS as seen here.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So far, I am comfortable with SCSS and am getting closer to becoming familiar with SASS. When I get there, you will be the first to know. For now, you can read-up on SASS &lt;a href=&quot;http://sass-lang.com/guide&quot;&gt;here&lt;/a&gt; if you are interested. Let me know how it goes for you!&lt;/p&gt;
</description>
        <pubDate>Mon, 20 Jul 2015 09:32:21 -0700</pubDate>
        <link>http://ktgilbert.com//2015/07/20/sass.html</link>
        <guid isPermaLink="true">http://ktgilbert.com//2015/07/20/sass.html</guid>
        
        
      </item>
    
      <item>
        <title>How to Make a Simple Navigation Menu From Scratch</title>
        <description>&lt;p&gt;Making a navigation bar was one of the first things that I learned to make using only HTML, CSS, and JavaScript. Seems simple, right? Well, I was on day two of learning about web-development. In actuality, it was way over my head. Yet, I was able to get some help that made the process easier to tackle. &lt;strong&gt;What helped the most, was breaking the problem down into manageable steps and learning some general principles about the languages I was working with.&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;start-by-learning-some-general-principles&quot;&gt;Start by learning some general principles&lt;/h1&gt;
&lt;p&gt;If you are like me and don’t know much about web development or these three languages, you may approach the problem by looking at a tutorial and just copying their examples and then pasting them into your text editor. Well, what if you knew what elements to actually reference in order to make your menu appear and function the way you want it to? &lt;em&gt;Spending some time to really learn the basic principles of the language you are working in can be super helpful.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Before I made my nav, I spent a couple of nights studying the basics of my three chosen languages. &lt;strong&gt;You might want to try doing the same and really hammering down these ideas:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The difference between an id and a class in CSS&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;HTML syntax - just how to write it, what tags are, etc. You may want to try going over some common things you can do in HTML such as building a list, making text bold, or creating a header. &lt;em&gt;Definitely, go over what divs and span tags are!&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Some basic JavaScript functions. Maybe, learn what a function is as well.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;how-to-approach-the-problem-of-creating-a-menu-for-your-page&quot;&gt;How to approach the problem of creating a menu for your page&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;In my case, I focused on HTML and CSS solutions first. You can start by simply making a list on your page. It should look something like this in a text editor (I use Sublime Text 2 if you are looking for a good one to use):&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Page 1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Page 2&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Page 3&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Okay great, these are the pages that you are going to be listed in your menu! Pretty awesome, right? Next, you are just going to think about how to make these “pages” look and function the way you want them to.&lt;/li&gt;
  &lt;li&gt;You can think about what to do in steps to make it easier if you want. I personally found approaching the process piece-by-piece easier to manage.&lt;/li&gt;
  &lt;li&gt;One place you could start is by thinking about the fact that these pages should be able to be click-able. Meaning, they should be linked. You can add the a href tag to your list to make this happen.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Page 1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Page 2&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Page 3&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Note thAT I’ve put “#” in the place of an actual link for now because I don’t have content or links for these pages yet.&lt;/li&gt;
  &lt;li&gt;So now, depending on what you want the menu to do and look like, you can think about what to do next.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;here-are-some-ideas-for-how-you-may-want-your-menu-to-look&quot;&gt;Here are some ideas for how you may want your menu to look&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;You may want the menu items to be laid out horizontally across your page.&lt;/li&gt;
  &lt;li&gt;Maybe you will want a menu item to simply display specific content when clicked. Well, you can do that with JavaScript&lt;/li&gt;
  &lt;li&gt;You could simply think about the style of the menu.
    &lt;ul&gt;
      &lt;li&gt;Maybe you want the menu to have a background color&lt;/li&gt;
      &lt;li&gt;Or, you want to change the font-size, font-color, or font-family of your text.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;css-properties-that-may-help&quot;&gt;CSS properties that may help&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;font-size:&lt;/strong&gt;
  font-size: 12px
  font-size: 8px&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;color:&lt;/strong&gt;
	color: #fff
	color: #d3d3d3
	color: #000000&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;font-family:&lt;/strong&gt;
	font-family: georgia, sans-serif  (note: consider having a &lt;a href=&quot;http://www.w3schools.com/cssref/css_websafe_fonts.asp&quot;&gt;fall-back font&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;text-transform:&lt;/strong&gt;
	text-transform: uppercase
	text-transform: lowercase
	text-transform: capitalize&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;background:&lt;/strong&gt; (change the color of an element’s background) }&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;text-align:&lt;/strong&gt;
	text-align: right
	text-align: left
	text-align: center&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;display&lt;/strong&gt;: inline (for horizontal menu items for example)
&lt;strong&gt;letter-spacing&lt;/strong&gt; (change the kerning)&lt;/p&gt;

&lt;p&gt;For more CSS properties, you can also &lt;a href=&quot;http://www.w3schools.com/cssref/&quot;&gt;check out W3Schools&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;One thing I can’t help but share:&lt;/strong&gt; I ran into a problem with CSS while working on my practice menu. I wanted the menu to look great on a computer, tablet, or mobile device. Yet, when the width of my page got to a certain point, the menu looked ugly. I asked for help and got an awesome solution in return.&lt;/p&gt;

&lt;p&gt;You can actually create a rule that says “hey, when the width of  someone’s screen gets to “x width,” I want something special to happen. In this example, I wanted an element on my menu to disappear and to make room for other items to appear nicely on a smaller screen. So cool, right?! It looks like this in case you want to try it for yourself.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;k&quot;&gt;@media&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;max-width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;545px&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;nf&quot;&gt;#site-title&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the end, I created a test site that looks like like this:
&lt;img src=&quot;/assets/test-menu.jpg&quot; alt=&quot;creating a menu from scratch&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Again, in my case I worked mostly with HTML and CSS to build a menu. I just wanted to make something simple and didn’t want to spend a lot of time coming up with solutions in JavaScript that I could have otherwise solved with just HTML and CSS.&lt;/p&gt;

&lt;p&gt;Remember, if you are have any trouble you can always Google specific solutions or questions you may have while building out your nav menu. &lt;strong&gt;Thanks for reading guys!&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 24 Jun 2015 09:32:21 -0700</pubDate>
        <link>http://ktgilbert.com//2015/06/24/nav-bar.html</link>
        <guid isPermaLink="true">http://ktgilbert.com//2015/06/24/nav-bar.html</guid>
        
        
      </item>
    
  </channel>
</rss>
