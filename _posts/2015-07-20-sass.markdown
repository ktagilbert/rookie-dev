---
layout: post
title: "How to Start Learning SCSS"
date: 2015-07-20 16:32:21
image: "brainstorm.jpg"
comments: true
description: >
 Don't be intimidated by Sass or SCSS. These are just preprocessors that can be learned in a matter of a week. Find resources for learning Sass here.
excerpt: >
 This blog is actually is the first site I have ever made. I made it using Jekyll. One night, my SO sat me down and showed me how to set up Jekyll and start using it. Sitting in our apartment, with my laptop on his lap, he started setting things up.
---

# Bridging the gap between CSS and SASS

I have a confession. When I first started working on this blog, I had no idea what SCSS was. The language just seemed like something that was going to be extremely difficult to learn. *With an already limited knowledge of CSS, I was intimidated.*

It turns out that SCSS is not that difficult.

## What helped me learn about SCSS:
![First SCSS project](/assets/brainstorm.jpg)

 I simply pulled open my computer and read up on SASS. I started by typing in "learning SASS" into Google. I  was then directed to [sass-lang.com](http://sass-lang.com/). The words "CSS with Superpowers" appeared on my screen.

It all looked very fancy. I then quickly realized that the differences between CSS and SCSS are not that large. They are definitely surmountable! **Here I am going to show you some basics to help you get started with SCSS.**

## You will learn three cool things:
1. How SCCS does nesting
2. How to use Variables
3. What an extend is

## Differences between CSS and SCSS

{% highlight CSS %}
.h1 {
 font-family: Georgia;
 color: #111;
}

.nav-list > li {
 color: #d3d3d3;
}
{% endhighlight %}

Okay, cool. Here we have some CSS that basically says, "hey for all headers, make the font-family Georgia and the color black." Below that we have some nested rules that say the list items under the class "nav-list" will all be a light-grey color. Alright, nice. **Now, let's write the same thing using SASS.**

## 1. Nesting with SCSS

{% highlight CSS %}
.h1 {
 font-family: Georgia;
 color: #111:
}

.nav-list {
 li {
 color: #d3d3d3;
 }
}
{% endhighlight %}

As you can see, it's not that different. I like to compare the way nesting looks in SCSS to the way the [Harvard Outline](http://writingcenter.fas.harvard.edu/pages/outlining) looks. Maybe that's just the nerd in me though. To me, it also makes sense that things would cascade like this. I mean, it is a naturally cascading language anyway. This part of SCSS is easy and I like it better personally.

## 2. Variables

SCSS also introduces the idea of variables. Here's an example from my own stylesheet:

{% highlight CSS %}
$header-align: center;
$container-color: #fff;
$large: 80px;
$rookie-blue: #40a9f2;
{% endhighlight %}

Here I basically have some rules:

- header align stands in for text-align center.
- texts within a container will appear white
- "large" stands in for padding: 80px
- $rookie-blue was one of my brand colors (before the re-design!)

I can use these rules inside my style sheet to save myself some time and keep some of my style properties uniform across the site here.

{% highlight CSS %}
.container-head {
  text-align: $header-align;
  font-size: 22px;
  font-weight: 400px;
  color: $container-color;
  display: block;
  padding-bottom: 18px;
}
{% endhighlight %}

## Extend

Next, SCSS introduces the idea of an extend. Meaning, you can assign a block of code to a variable. Here's an example.

{% highlight CSS %}
@extend .image-header {
 width: 145px;
 border-radius: 100%;
 padding: 0px;
 margin-left: 41%;
 height: 145px;
}
{% endhighlight %}

This block shows the properties I have assigned to a rounded image at the top of a page. With my extend defined, I can later add a similar image header just by typing in @extend .image-header as if it was another property. **This way, you can include large chunks of style properties that you know you will be using again later just by typing @extend followed by the name you assign to your block code.**

## Why use SCSS?
SCSS is really a bridging tool to help you get comfortable with SASS. It is a preprocessor. For you, this means that you can use CSS and SCSS will compile it into SASS. **In any file with .scss, you can set style rules using SASS, CSS, or SCSS as seen here.**

So far, I am comfortable with SCSS and am getting closer to becoming familiar with SASS. When I get there, you will be the first to know. For now, you can read-up on SASS [here](http://sass-lang.com/guide) if you are interested. Let me know how it goes for you!
